<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simon Xia</title>
  
  <subtitle>写程序的少年，走在市井之间</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://simonxia.com/"/>
  <updated>2018-04-18T08:44:39.000Z</updated>
  <id>http://simonxia.com/</id>
  
  <author>
    <name>Simon Xia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka 1.1 Compression Compare from Producer&#39;s View</title>
    <link href="http://simonxia.com/compress-type-kafka/"/>
    <id>http://simonxia.com/compress-type-kafka/</id>
    <published>2018-04-01T14:30:26.000Z</published>
    <updated>2018-04-18T08:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apache Kafka release <a href="https://www.apache.org/dist/kafka/1.1.0/RELEASE_NOTES.html" target="_blank" rel="noopener">v1.1</a> recently, and GZip compression performance has been increased in this <a href="https://issues.apache.org/jira/browse/KAFKA-6430" target="_blank" rel="noopener">version</a></p><h1 id="prepare">Prepare</h1><h2 id="environment">Environment</h2><p>three kafka brokers ran on the machine which has the following config:</p><blockquote><p>CPU: Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz CPU core: 48 Mem: 264028696 kB Net: 10 Gbps</p><p>OS: Ubuntu 16.04.2 LTS Kafka version: 1.1.0</p></blockquote><a id="more"></a><h2 id="test-script">Test Script</h2><p>I use the tool <code>kafka-producer-test.sh</code> ship with Kafka to compare performance of different compression type with different message and batch size. A simple script wraps <code>kafka-producer-test.sh</code> is as follows.</p><div><div class="fold_hider"><div class="close hider_title">compression_test.py (click to expand)</div></div><div class="fold"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os, subprocess, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">perf_one</span><span class="params">(msg_size, batch_size, compression, topic)</span>:</span></span><br><span class="line">        e = dict(os.environ)</span><br><span class="line">        e[<span class="string">'JMX_PORT'</span>] = str(random.randint(<span class="number">9500</span>,<span class="number">9876</span>))</span><br><span class="line">        producer_cmd = [<span class="string">'./kafka_2.12-1.1.0/bin/kafka-producer-perf-test.sh'</span>, <span class="string">'--topic'</span>, topic, <span class="string">'--num-records'</span>, <span class="string">'10000000'</span>, <span class="string">'--record-size'</span>, str(msg_size), <span class="string">'--throughput'</span>, <span class="string">'1000000000'</span>, <span class="string">'--producer-props'</span>, <span class="string">'acks=0'</span>, <span class="string">'bootstrap.servers=jjh720:19092'</span>,<span class="string">'batch.size=%d'</span>%batch_size]</span><br><span class="line">        <span class="keyword">if</span> len(compression) &gt; <span class="number">0</span> :</span><br><span class="line">                producer_cmd.append(<span class="string">'compression.type=%s'</span>%compression)</span><br><span class="line">        result = subprocess.run(producer_cmd, env=e, stdout=subprocess.PIPE)</span><br><span class="line">        result_str = result.stdout.decode(<span class="string">'utf-8'</span>).strip()</span><br><span class="line">        res_arr = result_str.split(<span class="string">'\n'</span>)[<span class="number">-1</span>].split(<span class="string">','</span>)</span><br><span class="line">        speed = res_arr[<span class="number">1</span>].strip().split(<span class="string">'('</span>)[<span class="number">0</span>]</span><br><span class="line">        throughout = res_arr[<span class="number">1</span>].strip().split(<span class="string">'('</span>)[<span class="number">1</span>][:<span class="number">-1</span>]</span><br><span class="line">        avg_latency = res_arr[<span class="number">2</span>].strip().split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line">        print(<span class="string">"%d,%d,%s,%s,%s,%s"</span>%(msg_size, batch_size, compression, speed, throughout, avg_latency))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"msg_size,batch_size,compression,speed,throughout,avg_latency"</span>)</span><br><span class="line"><span class="keyword">for</span> ms <span class="keyword">in</span> range(<span class="number">500</span>, <span class="number">1100</span>, <span class="number">100</span>):</span><br><span class="line">        <span class="keyword">for</span> bs <span class="keyword">in</span> range(<span class="number">1000</span>, <span class="number">11000</span>, <span class="number">1000</span>):</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> [<span class="string">"lz4"</span>, <span class="string">"gzip"</span>, <span class="string">"snappy"</span>, <span class="string">""</span>]:</span><br><span class="line">                        perf_one(ms, bs, c, <span class="string">"perf_test"</span>)</span><br></pre></td></tr></table></figure></div></div><h1 id="result">Result</h1><p>script got the following result.</p><div><div class="fold_hider"><div class="close hider_title">result.txt (click to expand)</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><span class="line">msg_size,batch_size,compression,speed,throughout,avg_latency</span><br><span class="line">100,1000,lz4,32944.587204 records/sec ,3.14 MB/sec,0.34</span><br><span class="line">100,1000,gzip,349650.349650 records/sec ,33.35 MB/sec,1.77</span><br><span class="line">100,1000,snappy,665335.994677 records/sec ,63.45 MB/sec,1.05</span><br><span class="line">100,1000,,500250.125063 records/sec ,47.71 MB/sec,322.23</span><br><span class="line">100,2000,lz4,32644.533673 records/sec ,3.11 MB/sec,0.34</span><br><span class="line">100,2000,gzip,367242.012486 records/sec ,35.02 MB/sec,1.97</span><br><span class="line">100,2000,snappy,718907.260963 records/sec ,68.56 MB/sec,0.90</span><br><span class="line">100,2000,,684931.506849 records/sec ,65.32 MB/sec,8.77</span><br><span class="line">100,3000,lz4,33616.835311 records/sec ,3.21 MB/sec,0.45</span><br><span class="line">100,3000,gzip,333778.371162 records/sec ,31.83 MB/sec,1.74</span><br><span class="line">100,3000,snappy,693962.526024 records/sec ,66.18 MB/sec,1.85</span><br><span class="line">100,3000,,819672.131148 records/sec ,78.17 MB/sec,1.08</span><br><span class="line">100,4000,lz4,32910.975810 records/sec ,3.14 MB/sec,0.34</span><br><span class="line">100,4000,gzip,372300.819062 records/sec ,35.51 MB/sec,1.70</span><br><span class="line">100,4000,snappy,704225.352113 records/sec ,67.16 MB/sec,0.69</span><br><span class="line">100,4000,,734214.390602 records/sec ,70.02 MB/sec,3.12</span><br><span class="line">100,5000,lz4,34645.232816 records/sec ,3.30 MB/sec,0.49</span><br><span class="line">100,5000,gzip,327439.423707 records/sec ,31.23 MB/sec,1.89</span><br><span class="line">100,5000,snappy,699790.062981 records/sec ,66.74 MB/sec,0.59</span><br><span class="line">100,5000,,782472.613459 records/sec ,74.62 MB/sec,1.16</span><br><span class="line">100,6000,lz4,33533.416049 records/sec ,3.20 MB/sec,0.42</span><br><span class="line">100,6000,gzip,370507.595406 records/sec ,35.33 MB/sec,1.61</span><br><span class="line">100,6000,snappy,728862.973761 records/sec ,69.51 MB/sec,0.94</span><br><span class="line">100,6000,,661813.368630 records/sec ,63.12 MB/sec,0.87</span><br><span class="line">100,7000,lz4,35825.600974 records/sec ,3.42 MB/sec,0.73</span><br><span class="line">100,7000,gzip,362318.840580 records/sec ,34.55 MB/sec,1.87</span><br><span class="line">100,7000,snappy,752445.447705 records/sec ,71.76 MB/sec,0.84</span><br><span class="line">100,7000,,692520.775623 records/sec ,66.04 MB/sec,1.17</span><br><span class="line">100,8000,lz4,32675.467259 records/sec ,3.12 MB/sec,0.41</span><br><span class="line">100,8000,gzip,348068.221371 records/sec ,33.19 MB/sec,1.81</span><br><span class="line">100,8000,snappy,755857.898715 records/sec ,72.08 MB/sec,0.72</span><br><span class="line">100,8000,,710732.054016 records/sec ,67.78 MB/sec,0.87</span><br><span class="line">100,9000,lz4,34057.625502 records/sec ,3.25 MB/sec,0.34</span><br><span class="line">100,9000,gzip,352236.703064 records/sec ,33.59 MB/sec,1.83</span><br><span class="line">100,9000,snappy,722021.660650 records/sec ,68.86 MB/sec,0.63</span><br><span class="line">100,9000,,722543.352601 records/sec ,68.91 MB/sec,1.02</span><br><span class="line">200,1000,lz4,34562.610168 records/sec ,6.59 MB/sec,0.51</span><br><span class="line">200,1000,gzip,301659.125189 records/sec ,57.54 MB/sec,2.11</span><br><span class="line">200,1000,snappy,606428.138266 records/sec ,115.67 MB/sec,1.05</span><br><span class="line">200,1000,,319795.330988 records/sec ,61.00 MB/sec,321.44</span><br><span class="line">200,2000,lz4,32758.959575 records/sec ,6.25 MB/sec,0.41</span><br><span class="line">200,2000,gzip,293083.235639 records/sec ,55.90 MB/sec,2.09</span><br><span class="line">200,2000,snappy,738007.380074 records/sec ,140.76 MB/sec,1.49</span><br><span class="line">200,2000,,483558.994197 records/sec ,92.23 MB/sec,187.23</span><br><span class="line">200,3000,lz4,32676.534980 records/sec ,6.23 MB/sec,0.44</span><br><span class="line">200,3000,gzip,283125.707814 records/sec ,54.00 MB/sec,2.37</span><br><span class="line">200,3000,snappy,703729.767769 records/sec ,134.23 MB/sec,1.19</span><br><span class="line">200,3000,,521376.433785 records/sec ,99.44 MB/sec,181.36</span><br><span class="line">200,4000,lz4,35138.269089 records/sec ,6.70 MB/sec,0.38</span><br><span class="line">200,4000,gzip,303490.136571 records/sec ,57.89 MB/sec,2.26</span><br><span class="line">200,4000,snappy,720980.533526 records/sec ,137.52 MB/sec,1.23</span><br><span class="line">200,4000,,600600.600601 records/sec ,114.56 MB/sec,94.15</span><br><span class="line">200,5000,lz4,32809.475376 records/sec ,6.26 MB/sec,0.37</span><br><span class="line">200,5000,gzip,274273.176083 records/sec ,52.31 MB/sec,2.30</span><br><span class="line">200,5000,snappy,675675.675676 records/sec ,128.87 MB/sec,1.45</span><br><span class="line">200,5000,,606796.116505 records/sec ,115.74 MB/sec,118.09</span><br><span class="line">200,6000,lz4,34163.506542 records/sec ,6.52 MB/sec,0.44</span><br><span class="line">200,6000,gzip,295246.530853 records/sec ,56.31 MB/sec,2.68</span><br><span class="line">200,6000,snappy,690131.124914 records/sec ,131.63 MB/sec,0.96</span><br><span class="line">200,6000,,615763.546798 records/sec ,117.45 MB/sec,113.79</span><br><span class="line">200,7000,lz4,34332.406358 records/sec ,6.55 MB/sec,0.47</span><br><span class="line">200,7000,gzip,310752.019888 records/sec ,59.27 MB/sec,2.29</span><br><span class="line">200,7000,snappy,729394.602480 records/sec ,139.12 MB/sec,0.72</span><br><span class="line">200,7000,,724637.681159 records/sec ,138.21 MB/sec,11.62</span><br><span class="line">200,8000,lz4,34458.993797 records/sec ,6.57 MB/sec,0.42</span><br><span class="line">200,8000,gzip,293772.032902 records/sec ,56.03 MB/sec,2.07</span><br><span class="line">200,8000,snappy,713775.874375 records/sec ,136.14 MB/sec,0.92</span><br><span class="line">200,8000,,665335.994677 records/sec ,126.90 MB/sec,2.19</span><br><span class="line">200,9000,lz4,34063.426099 records/sec ,6.50 MB/sec,0.39</span><br><span class="line">200,9000,gzip,294204.177699 records/sec ,56.11 MB/sec,2.27</span><br><span class="line">200,9000,snappy,718390.804598 records/sec ,137.02 MB/sec,0.98</span><br><span class="line">200,9000,,698812.019567 records/sec ,133.29 MB/sec,4.25</span><br><span class="line">300,1000,lz4,33622.486719 records/sec ,9.62 MB/sec,1.02</span><br><span class="line">300,1000,gzip,235960.358660 records/sec ,67.51 MB/sec,2.51</span><br><span class="line">300,1000,snappy,570450.656018 records/sec ,163.21 MB/sec,135.43</span><br><span class="line">300,1000,,263157.894737 records/sec ,75.29 MB/sec,318.96</span><br><span class="line">300,2000,lz4,35132.096684 records/sec ,10.05 MB/sec,0.95</span><br><span class="line">300,2000,gzip,253807.106599 records/sec ,72.61 MB/sec,2.62</span><br><span class="line">300,2000,snappy,749063.670412 records/sec ,214.31 MB/sec,9.33</span><br><span class="line">300,2000,,364166.059723 records/sec ,104.19 MB/sec,228.00</span><br><span class="line">300,3000,lz4,33552.543283 records/sec ,9.60 MB/sec,0.71</span><br><span class="line">300,3000,gzip,245338.567223 records/sec ,70.19 MB/sec,2.57</span><br><span class="line">300,3000,snappy,688231.245699 records/sec ,196.90 MB/sec,1.23</span><br><span class="line">300,3000,,444049.733570 records/sec ,127.04 MB/sec,180.76</span><br><span class="line">300,4000,lz4,32857.987777 records/sec ,9.40 MB/sec,0.39</span><br><span class="line">300,4000,gzip,239120.038259 records/sec ,68.41 MB/sec,2.71</span><br><span class="line">300,4000,snappy,646412.411118 records/sec ,184.94 MB/sec,1.37</span><br><span class="line">300,4000,,453309.156845 records/sec ,129.69 MB/sec,166.44</span><br><span class="line">300,5000,lz4,31098.395323 records/sec ,8.90 MB/sec,0.59</span><br><span class="line">300,5000,gzip,230680.507497 records/sec ,66.00 MB/sec,2.92</span><br><span class="line">300,5000,snappy,689655.172414 records/sec ,197.31 MB/sec,0.86</span><br><span class="line">300,5000,,507356.671740 records/sec ,145.16 MB/sec,147.32</span><br><span class="line">300,6000,lz4,33448.172057 records/sec ,9.57 MB/sec,0.52</span><br><span class="line">300,6000,gzip,239177.230328 records/sec ,68.43 MB/sec,2.71</span><br><span class="line">300,6000,snappy,682593.856655 records/sec ,195.29 MB/sec,0.98</span><br><span class="line">300,6000,,526315.789474 records/sec ,150.58 MB/sec,127.42</span><br><span class="line">300,7000,lz4,34719.811124 records/sec ,9.93 MB/sec,0.48</span><br><span class="line">300,7000,gzip,247157.686604 records/sec ,70.71 MB/sec,2.63</span><br><span class="line">300,7000,snappy,686341.798216 records/sec ,196.36 MB/sec,1.13</span><br><span class="line">300,7000,,498753.117207 records/sec ,142.69 MB/sec,144.28</span><br><span class="line">300,8000,lz4,35164.216893 records/sec ,10.06 MB/sec,0.44</span><br><span class="line">300,8000,gzip,243902.439024 records/sec ,69.78 MB/sec,2.66</span><br><span class="line">300,8000,snappy,583090.379009 records/sec ,166.82 MB/sec,0.81</span><br><span class="line">300,8000,,592417.061611 records/sec ,169.49 MB/sec,99.67</span><br><span class="line">300,9000,lz4,32268.473701 records/sec ,9.23 MB/sec,0.51</span><br><span class="line">300,9000,gzip,245941.957698 records/sec ,70.36 MB/sec,2.68</span><br><span class="line">300,9000,snappy,656598.818122 records/sec ,187.85 MB/sec,1.38</span><br><span class="line">300,9000,,593471.810089 records/sec ,169.79 MB/sec,106.78</span><br><span class="line">400,1000,lz4,32739.654269 records/sec ,12.49 MB/sec,0.43</span><br><span class="line">400,1000,gzip,203998.368013 records/sec ,77.82 MB/sec,1.85</span><br><span class="line">400,1000,snappy,258197.779499 records/sec ,98.49 MB/sec,348.04</span><br><span class="line">400,1000,,174794.616326 records/sec ,66.68 MB/sec,344.20</span><br><span class="line">400,2000,lz4,32063.614211 records/sec ,12.23 MB/sec,0.45</span><br><span class="line">400,2000,gzip,217580.504787 records/sec ,83.00 MB/sec,3.09</span><br><span class="line">400,2000,snappy,647249.190939 records/sec ,246.91 MB/sec,2.71</span><br><span class="line">400,2000,,272108.843537 records/sec ,103.80 MB/sec,211.19</span><br><span class="line">400,3000,lz4,34020.548411 records/sec ,12.98 MB/sec,0.58</span><br><span class="line">400,3000,gzip,230893.558070 records/sec ,88.08 MB/sec,2.80</span><br><span class="line">400,3000,snappy,626566.416040 records/sec ,239.02 MB/sec,1.53</span><br><span class="line">400,3000,,380662.352493 records/sec ,145.21 MB/sec,167.88</span><br><span class="line">400,4000,lz4,32452.781203 records/sec ,12.38 MB/sec,0.38</span><br><span class="line">400,4000,gzip,225174.510245 records/sec ,85.90 MB/sec,2.91</span><br><span class="line">400,4000,snappy,679809.653297 records/sec ,259.33 MB/sec,1.34</span><br><span class="line">400,4000,,407166.123779 records/sec ,155.32 MB/sec,150.63</span><br><span class="line">400,5000,lz4,34318.267614 records/sec ,13.09 MB/sec,0.37</span><br><span class="line">400,5000,gzip,218435.998253 records/sec ,83.33 MB/sec,2.87</span><br><span class="line">400,5000,snappy,714796.283059 records/sec ,272.67 MB/sec,1.07</span><br><span class="line">400,5000,,447227.191413 records/sec ,170.60 MB/sec,139.64</span><br><span class="line">400,6000,lz4,32184.351968 records/sec ,12.28 MB/sec,0.54</span><br><span class="line">400,6000,gzip,220994.475138 records/sec ,84.30 MB/sec,2.89</span><br><span class="line">400,6000,snappy,660066.006601 records/sec ,251.80 MB/sec,1.57</span><br><span class="line">400,6000,,464252.553389 records/sec ,177.10 MB/sec,125.75</span><br><span class="line">400,7000,lz4,32263.268269 records/sec ,12.31 MB/sec,0.48</span><br><span class="line">400,7000,gzip,213857.998289 records/sec ,81.58 MB/sec,3.14</span><br><span class="line">400,7000,snappy,644329.896907 records/sec ,245.79 MB/sec,0.93</span><br><span class="line">400,7000,,460617.227084 records/sec ,175.71 MB/sec,129.28</span><br><span class="line">400,8000,lz4,35257.201283 records/sec ,13.45 MB/sec,0.38</span><br><span class="line">400,8000,gzip,220361.392684 records/sec ,84.06 MB/sec,3.00</span><br><span class="line">400,8000,snappy,670690.811536 records/sec ,255.85 MB/sec,1.30</span><br><span class="line">400,8000,,501253.132832 records/sec ,191.21 MB/sec,104.15</span><br><span class="line">400,9000,lz4,34502.984508 records/sec ,13.16 MB/sec,0.42</span><br><span class="line">400,9000,gzip,221975.582686 records/sec ,84.68 MB/sec,2.94</span><br><span class="line">400,9000,snappy,727802.037846 records/sec ,277.63 MB/sec,1.06</span><br><span class="line">400,9000,,473484.848485 records/sec ,180.62 MB/sec,127.24</span><br><span class="line">500,1000,lz4,32319.575967 records/sec ,15.41 MB/sec,0.46</span><br><span class="line">500,1000,gzip,98087.297695 records/sec ,46.77 MB/sec,1.38</span><br><span class="line">500,1000,snappy,103896.103896 records/sec ,49.54 MB/sec,303.94</span><br><span class="line">500,1000,,112930.547713 records/sec ,53.85 MB/sec,280.65</span><br><span class="line">500,2000,lz4,33901.752721 records/sec ,16.17 MB/sec,0.39</span><br><span class="line">500,2000,gzip,196734.212079 records/sec ,93.81 MB/sec,3.22</span><br><span class="line">500,2000,snappy,579710.144928 records/sec ,276.43 MB/sec,2.28</span><br><span class="line">500,2000,,231481.481481 records/sec ,110.38 MB/sec,192.53</span><br><span class="line">500,3000,lz4,32762.179340 records/sec ,15.62 MB/sec,0.63</span><br><span class="line">500,3000,gzip,194704.049844 records/sec ,92.84 MB/sec,3.15</span><br><span class="line">500,3000,snappy,636942.675159 records/sec ,303.72 MB/sec,3.55</span><br><span class="line">500,3000,,306936.771025 records/sec ,146.36 MB/sec,158.28</span><br><span class="line">500,4000,lz4,34058.785464 records/sec ,16.24 MB/sec,0.47</span><br><span class="line">500,4000,gzip,198452.073824 records/sec ,94.63 MB/sec,3.08</span><br><span class="line">500,4000,snappy,610873.549175 records/sec ,291.29 MB/sec,1.77</span><br><span class="line">500,4000,,338983.050847 records/sec ,161.64 MB/sec,148.53</span><br><span class="line">500,5000,lz4,33358.908497 records/sec ,15.91 MB/sec,0.47</span><br><span class="line">500,5000,gzip,197316.495659 records/sec ,94.09 MB/sec,3.24</span><br><span class="line">500,5000,snappy,718907.260963 records/sec ,342.80 MB/sec,5.08</span><br><span class="line">500,5000,,377358.490566 records/sec ,179.94 MB/sec,125.13</span><br><span class="line">500,6000,lz4,32377.128796 records/sec ,15.44 MB/sec,0.75</span><br><span class="line">500,6000,gzip,180570.603106 records/sec ,86.10 MB/sec,3.59</span><br><span class="line">500,6000,snappy,718907.260963 records/sec ,342.80 MB/sec,1.83</span><br><span class="line">500,6000,,359195.402299 records/sec ,171.28 MB/sec,141.21</span><br><span class="line">500,7000,lz4,35711.734876 records/sec ,17.03 MB/sec,0.71</span><br><span class="line">500,7000,gzip,183992.640294 records/sec ,87.73 MB/sec,3.61</span><br><span class="line">500,7000,snappy,686813.186813 records/sec ,327.50 MB/sec,0.88</span><br><span class="line">500,7000,,404694.455686 records/sec ,192.97 MB/sec,125.75</span><br><span class="line">500,8000,lz4,33298.924445 records/sec ,15.88 MB/sec,0.42</span><br><span class="line">500,8000,gzip,200200.200200 records/sec ,95.46 MB/sec,3.18</span><br><span class="line">500,8000,snappy,680272.108844 records/sec ,324.38 MB/sec,0.92</span><br><span class="line">500,8000,,413564.929694 records/sec ,197.20 MB/sec,121.37</span><br><span class="line">500,9000,lz4,33514.310611 records/sec ,15.98 MB/sec,0.69</span><br><span class="line">500,9000,gzip,204457.166224 records/sec ,97.49 MB/sec,3.16</span><br><span class="line">500,9000,snappy,746268.656716 records/sec ,355.85 MB/sec,1.58</span><br><span class="line">500,9000,,466200.466200 records/sec ,222.30 MB/sec,109.59</span><br><span class="line">600,1000,lz4,32954.358214 records/sec ,18.86 MB/sec,0.41</span><br><span class="line">600,1000,gzip,33837.512266 records/sec ,19.36 MB/sec,1.48</span><br><span class="line">600,1000,snappy,108342.361863 records/sec ,61.99 MB/sec,291.09</span><br><span class="line">600,1000,,103960.910698 records/sec ,59.49 MB/sec,303.49</span><br><span class="line">600,2000,lz4,32162.614177 records/sec ,18.40 MB/sec,0.42</span><br><span class="line">600,2000,gzip,168067.226891 records/sec ,96.17 MB/sec,3.63</span><br><span class="line">600,2000,snappy,535045.478866 records/sec ,306.16 MB/sec,5.95</span><br><span class="line">600,2000,,225377.507325 records/sec ,128.96 MB/sec,197.16</span><br><span class="line">600,3000,lz4,33554.794980 records/sec ,19.20 MB/sec,0.44</span><br><span class="line">600,3000,gzip,167560.321716 records/sec ,95.88 MB/sec,3.78</span><br><span class="line">600,3000,snappy,673854.447439 records/sec ,385.58 MB/sec,2.09</span><br><span class="line">600,3000,,267809.319764 records/sec ,153.24 MB/sec,146.92</span><br><span class="line">600,4000,lz4,32936.991535 records/sec ,18.85 MB/sec,0.74</span><br><span class="line">600,4000,gzip,168890.390137 records/sec ,96.64 MB/sec,3.59</span><br><span class="line">600,4000,snappy,675219.446320 records/sec ,386.36 MB/sec,1.58</span><br><span class="line">600,4000,,289351.851852 records/sec ,165.57 MB/sec,149.50</span><br><span class="line">600,5000,lz4,35303.254960 records/sec ,20.20 MB/sec,0.71</span><br><span class="line">600,5000,gzip,172562.553926 records/sec ,98.74 MB/sec,3.51</span><br><span class="line">600,5000,snappy,674308.833446 records/sec ,385.84 MB/sec,1.38</span><br><span class="line">600,5000,,326264.274062 records/sec ,186.69 MB/sec,139.46</span><br><span class="line">600,6000,lz4,35273.368607 records/sec ,20.18 MB/sec,0.70</span><br><span class="line">600,6000,gzip,167140.230654 records/sec ,95.64 MB/sec,3.60</span><br><span class="line">600,6000,snappy,706214.689266 records/sec ,404.10 MB/sec,1.24</span><br><span class="line">600,6000,,351741.118537 records/sec ,201.27 MB/sec,120.80</span><br><span class="line">600,7000,lz4,33762.112158 records/sec ,19.32 MB/sec,0.50</span><br><span class="line">600,7000,gzip,172354.360565 records/sec ,98.62 MB/sec,3.65</span><br><span class="line">600,7000,snappy,638977.635783 records/sec ,365.63 MB/sec,1.28</span><br><span class="line">600,7000,,350262.697023 records/sec ,200.42 MB/sec,125.27</span><br><span class="line">600,8000,lz4,35319.464557 records/sec ,20.21 MB/sec,0.87</span><br><span class="line">600,8000,gzip,169462.802915 records/sec ,96.97 MB/sec,3.67</span><br><span class="line">600,8000,snappy,669792.364367 records/sec ,383.26 MB/sec,1.27</span><br><span class="line">600,8000,,397140.587768 records/sec ,227.25 MB/sec,110.43</span><br><span class="line">600,9000,lz4,33460.483169 records/sec ,19.15 MB/sec,0.54</span><br><span class="line">600,9000,gzip,171939.477304 records/sec ,98.38 MB/sec,3.69</span><br><span class="line">600,9000,snappy,715307.582260 records/sec ,409.30 MB/sec,1.66</span><br><span class="line">600,9000,,382116.927780 records/sec ,218.65 MB/sec,111.99</span><br><span class="line">700,1000,lz4,34240.712207 records/sec ,22.86 MB/sec,0.43</span><br><span class="line">700,1000,gzip,34752.389227 records/sec ,23.20 MB/sec,1.82</span><br><span class="line">700,1000,snappy,101832.993890 records/sec ,67.98 MB/sec,307.76</span><br><span class="line">700,1000,,105552.037154 records/sec ,70.46 MB/sec,299.11</span><br><span class="line">700,2000,lz4,34564.999482 records/sec ,23.07 MB/sec,0.99</span><br><span class="line">700,2000,gzip,162364.020133 records/sec ,108.39 MB/sec,3.45</span><br><span class="line">700,2000,snappy,430663.221361 records/sec ,287.50 MB/sec,224.68</span><br><span class="line">700,2000,,172801.105927 records/sec ,115.36 MB/sec,179.99</span><br><span class="line">700,3000,lz4,33992.793528 records/sec ,22.69 MB/sec,0.70</span><br><span class="line">700,3000,gzip,153917.192550 records/sec ,102.75 MB/sec,3.80</span><br><span class="line">700,3000,snappy,623052.959502 records/sec ,415.93 MB/sec,13.57</span><br><span class="line">700,3000,,250375.563345 records/sec ,167.14 MB/sec,157.58</span><br><span class="line">700,4000,lz4,34247.748211 records/sec ,22.86 MB/sec,0.51</span><br><span class="line">700,4000,gzip,156666.144446 records/sec ,104.59 MB/sec,3.83</span><br><span class="line">700,4000,snappy,623441.396509 records/sec ,416.19 MB/sec,2.51</span><br><span class="line">700,4000,,273747.604708 records/sec ,182.75 MB/sec,134.82</span><br><span class="line">700,5000,lz4,33627.009214 records/sec ,22.45 MB/sec,0.60</span><br><span class="line">700,5000,gzip,152415.790276 records/sec ,101.75 MB/sec,4.02</span><br><span class="line">700,5000,snappy,616522.811344 records/sec ,411.57 MB/sec,2.82</span><br><span class="line">700,5000,,304506.699147 records/sec ,203.28 MB/sec,116.67</span><br><span class="line">700,6000,lz4,34379.619761 records/sec ,22.95 MB/sec,0.64</span><br><span class="line">700,6000,gzip,154726.907009 records/sec ,103.29 MB/sec,3.84</span><br><span class="line">700,6000,snappy,628140.703518 records/sec ,419.33 MB/sec,1.37</span><br><span class="line">700,6000,,331785.003318 records/sec ,221.49 MB/sec,116.54</span><br><span class="line">700,7000,lz4,32928.315058 records/sec ,21.98 MB/sec,0.49</span><br><span class="line">700,7000,gzip,159159.637116 records/sec ,106.25 MB/sec,3.77</span><br><span class="line">700,7000,snappy,656598.818122 records/sec ,438.33 MB/sec,2.09</span><br><span class="line">700,7000,,343288.705802 records/sec ,229.17 MB/sec,109.42</span><br><span class="line">700,8000,lz4,34520.850594 records/sec ,23.05 MB/sec,0.60</span><br><span class="line">700,8000,gzip,150150.150150 records/sec ,100.24 MB/sec,4.02</span><br><span class="line">700,8000,snappy,668002.672011 records/sec ,445.94 MB/sec,1.75</span><br><span class="line">700,8000,,334224.598930 records/sec ,223.12 MB/sec,115.92</span><br><span class="line">700,9000,lz4,36690.515502 records/sec ,24.49 MB/sec,0.84</span><br><span class="line">700,9000,gzip,153940.886700 records/sec ,102.77 MB/sec,3.91</span><br><span class="line">700,9000,snappy,739098.300074 records/sec ,493.40 MB/sec,1.24</span><br><span class="line">700,9000,,322997.416021 records/sec ,215.62 MB/sec,118.36</span><br><span class="line">800,1000,lz4,33660.966743 records/sec ,25.68 MB/sec,0.57</span><br><span class="line">800,1000,gzip,31950.923382 records/sec ,24.38 MB/sec,4.75</span><br><span class="line">800,1000,snappy,95877.277085 records/sec ,73.15 MB/sec,328.75</span><br><span class="line">800,1000,,105185.652677 records/sec ,80.25 MB/sec,301.86</span><br><span class="line">800,2000,lz4,32219.608854 records/sec ,24.58 MB/sec,0.55</span><br><span class="line">800,2000,gzip,150534.397110 records/sec ,114.85 MB/sec,2.95</span><br><span class="line">800,2000,snappy,386996.904025 records/sec ,295.26 MB/sec,168.16</span><br><span class="line">800,2000,,172265.288544 records/sec ,131.43 MB/sec,181.25</span><br><span class="line">800,3000,lz4,36189.924725 records/sec ,27.61 MB/sec,0.89</span><br><span class="line">800,3000,gzip,144300.144300 records/sec ,110.09 MB/sec,4.07</span><br><span class="line">800,3000,snappy,610128.126907 records/sec ,465.49 MB/sec,2.56</span><br><span class="line">800,3000,,224466.891134 records/sec ,171.25 MB/sec,133.37</span><br><span class="line">800,4000,lz4,33905.201058 records/sec ,25.87 MB/sec,0.53</span><br><span class="line">800,4000,gzip,152137.532329 records/sec ,116.07 MB/sec,3.98</span><br><span class="line">800,4000,snappy,709219.858156 records/sec ,541.09 MB/sec,3.51</span><br><span class="line">800,4000,,257334.019557 records/sec ,196.33 MB/sec,117.22</span><br><span class="line">800,5000,lz4,33978.933062 records/sec ,25.92 MB/sec,0.45</span><br><span class="line">800,5000,gzip,144654.997830 records/sec ,110.36 MB/sec,4.03</span><br><span class="line">800,5000,snappy,665778.961385 records/sec ,507.95 MB/sec,2.25</span><br><span class="line">800,5000,,288766.965059 records/sec ,220.31 MB/sec,122.60</span><br><span class="line">800,6000,lz4,34321.801208 records/sec ,26.19 MB/sec,0.67</span><br><span class="line">800,6000,gzip,150738.619234 records/sec ,115.00 MB/sec,3.92</span><br><span class="line">800,6000,snappy,656167.979003 records/sec ,500.62 MB/sec,1.74</span><br><span class="line">800,6000,,273074.822501 records/sec ,208.34 MB/sec,126.54</span><br><span class="line">800,7000,lz4,36281.837312 records/sec ,27.68 MB/sec,1.47</span><br><span class="line">800,7000,gzip,152671.755725 records/sec ,116.48 MB/sec,3.89</span><br><span class="line">800,7000,snappy,664893.617021 records/sec ,507.27 MB/sec,2.96</span><br><span class="line">800,7000,,276931.597895 records/sec ,211.28 MB/sec,121.77</span><br><span class="line">800,8000,lz4,37248.109658 records/sec ,28.42 MB/sec,0.69</span><br><span class="line">800,8000,gzip,147819.660015 records/sec ,112.78 MB/sec,3.85</span><br><span class="line">800,8000,snappy,695894.224078 records/sec ,530.93 MB/sec,1.27</span><br><span class="line">800,8000,,289939.112786 records/sec ,221.21 MB/sec,116.32</span><br><span class="line">800,9000,lz4,36553.715685 records/sec ,27.89 MB/sec,0.57</span><br><span class="line">800,9000,gzip,140469.167018 records/sec ,107.17 MB/sec,4.12</span><br><span class="line">800,9000,snappy,704225.352113 records/sec ,537.28 MB/sec,2.71</span><br><span class="line">800,9000,,312695.434647 records/sec ,238.57 MB/sec,111.76</span><br><span class="line">900,1000,lz4,32237.266280 records/sec ,27.67 MB/sec,0.43</span><br><span class="line">900,1000,gzip,30519.440884 records/sec ,26.20 MB/sec,1.59</span><br><span class="line">900,1000,snappy,97106.234220 records/sec ,83.35 MB/sec,321.75</span><br><span class="line">900,1000,,102585.145671 records/sec ,88.05 MB/sec,308.57</span><br><span class="line">900,2000,lz4,31028.918952 records/sec ,26.63 MB/sec,0.42</span><br><span class="line">900,2000,gzip,127113.257913 records/sec ,109.10 MB/sec,2.61</span><br><span class="line">900,2000,snappy,174886.323889 records/sec ,150.11 MB/sec,178.71</span><br><span class="line">900,2000,,165508.109897 records/sec ,142.06 MB/sec,188.85</span><br><span class="line">900,3000,lz4,35843.578623 records/sec ,30.76 MB/sec,1.84</span><br><span class="line">900,3000,gzip,136035.913481 records/sec ,116.76 MB/sec,4.03</span><br><span class="line">900,3000,snappy,529100.529101 records/sec ,454.13 MB/sec,38.18</span><br><span class="line">900,3000,,202963.263649 records/sec ,174.20 MB/sec,152.13</span><br><span class="line">900,4000,lz4,34470.872113 records/sec ,29.59 MB/sec,0.61</span><br><span class="line">900,4000,gzip,141602.945341 records/sec ,121.54 MB/sec,3.90</span><br><span class="line">900,4000,snappy,623830.318153 records/sec ,535.44 MB/sec,2.03</span><br><span class="line">900,4000,,226705.962367 records/sec ,194.58 MB/sec,134.40</span><br><span class="line">900,5000,lz4,36722.852631 records/sec ,31.52 MB/sec,0.96</span><br><span class="line">900,5000,gzip,141924.496168 records/sec ,121.81 MB/sec,3.84</span><br><span class="line">900,5000,snappy,599520.383693 records/sec ,514.57 MB/sec,4.04</span><br><span class="line">900,5000,,251319.426992 records/sec ,215.71 MB/sec,120.15</span><br><span class="line">900,6000,lz4,32607.277944 records/sec ,27.99 MB/sec,0.76</span><br><span class="line">900,6000,gzip,137684.152554 records/sec ,118.18 MB/sec,3.92</span><br><span class="line">900,6000,snappy,686813.186813 records/sec ,589.50 MB/sec,2.45</span><br><span class="line">900,6000,,269179.004038 records/sec ,231.04 MB/sec,111.54</span><br><span class="line">900,7000,lz4,37797.180330 records/sec ,32.44 MB/sec,0.99</span><br><span class="line">900,7000,gzip,136612.021858 records/sec ,117.26 MB/sec,4.02</span><br><span class="line">900,7000,snappy,728862.973761 records/sec ,625.59 MB/sec,1.10</span><br><span class="line">900,7000,,277700.638711 records/sec ,238.35 MB/sec,107.58</span><br><span class="line">900,8000,lz4,34837.136387 records/sec ,29.90 MB/sec,0.64</span><br><span class="line">900,8000,gzip,145985.401460 records/sec ,125.30 MB/sec,3.79</span><br><span class="line">900,8000,snappy,699790.062981 records/sec ,600.63 MB/sec,2.41</span><br><span class="line">900,8000,,300030.003000 records/sec ,257.52 MB/sec,98.75</span><br><span class="line">900,9000,lz4,34097.108565 records/sec ,29.27 MB/sec,0.98</span><br><span class="line">900,9000,gzip,142836.737609 records/sec ,122.60 MB/sec,3.74</span><br><span class="line">900,9000,snappy,667556.742323 records/sec ,572.97 MB/sec,1.32</span><br><span class="line">900,9000,,291375.291375 records/sec ,250.09 MB/sec,101.66</span><br></pre></td></tr></table></figure></div></div><p>and plot the result</p><div><div class="fold_hider"><div class="close hider_title">plot.py (click to expand)</div></div><div class="fold"> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">d = pd.read_csv(<span class="string">'output.csv'</span>)</span><br><span class="line">d[<span class="string">'speed'</span>] = d[<span class="string">'speed'</span>].apply(<span class="keyword">lambda</span> x: float(x.strip().split(<span class="string">' '</span>)[<span class="number">0</span>]))</span><br><span class="line">d[<span class="string">'throughout'</span>] = d[<span class="string">'throughout'</span>].apply(<span class="keyword">lambda</span> x: float(x.strip().split(<span class="string">' '</span>)[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">131</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">132</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">133</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line">plot = &#123;</span><br><span class="line">    ax: <span class="string">'avg_latency'</span>,        </span><br><span class="line">    ax1: <span class="string">'speed'</span>,        </span><br><span class="line">    ax2: <span class="string">'throughout'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a, tag <span class="keyword">in</span> plot.items():</span><br><span class="line">    <span class="keyword">for</span> t, c <span class="keyword">in</span> zip([<span class="string">"gzip"</span>, <span class="string">"snappy"</span>, <span class="string">"lz4"</span>], [<span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'y'</span>]):</span><br><span class="line">        a.scatter(d[d[<span class="string">'compression'</span>]==t][<span class="string">'msg_size'</span>].values, d[d[<span class="string">'compression'</span>]==t][<span class="string">'batch_size'</span>].values, zs=d[d[<span class="string">'compression'</span>]==t][tag].values, color=c, label=t)</span><br><span class="line">    a.scatter(d[d[<span class="string">'compression'</span>].isnull()][<span class="string">'msg_size'</span>].values, d[d[<span class="string">'compression'</span>].isnull()][<span class="string">'batch_size'</span>].values, zs=d[d[<span class="string">'compression'</span>].isnull()][tag].values, color=<span class="string">'g'</span>, label=<span class="string">'none'</span>)</span><br><span class="line">    a.set_xlabel(<span class="string">'msg_size'</span>)</span><br><span class="line">    a.set_ylabel(<span class="string">'batch_size'</span>)</span><br><span class="line">    a.set_zlabel(tag)</span><br><span class="line">    a.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div></div><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/compress-type-kafka/compress-result.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><p>There’re three subplots with different z-axis</p><ul><li><p>avg_latency means the average time to produce a record successfully, which is a round trip between producer and broker</p></li><li><p>speed means how many record produced in a second</p></li><li><p>throughout equals speed * message size</p></li></ul><p>From the figure, when batch_size &gt; 5000, msg_size &gt; 500:</p><ul><li>lz4, snappy, gzip are comparable in terms of write latency and are better than uncompressed messages</li><li>In terms of speed, gzip is significantly better than lz4, uncompressed is about twice as fast as gzip, and snappy is about three times faster than gzip</li></ul><p>In terms of throughput, there has been a trend of snappy&gt; uncompressed&gt; gzip&gt; lz4, and the gap among them has increased significantly when msg_size and batch_size grows</p><p>In general, snappy performs best from producer’s view</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apache Kafka release &lt;a href=&quot;https://www.apache.org/dist/kafka/1.1.0/RELEASE_NOTES.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;v1.1&lt;/a&gt; recently, and GZip compression performance has been increased in this &lt;a href=&quot;https://issues.apache.org/jira/browse/KAFKA-6430&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;version&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;prepare&quot;&gt;Prepare&lt;/h1&gt;
&lt;h2 id=&quot;environment&quot;&gt;Environment&lt;/h2&gt;
&lt;p&gt;three kafka brokers ran on the machine which has the following config:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CPU: Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz CPU core: 48 Mem: 264028696 kB Net: 10 Gbps&lt;/p&gt;
&lt;p&gt;OS: Ubuntu 16.04.2 LTS Kafka version: 1.1.0&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="infra" scheme="http://simonxia.com/categories/infra/"/>
    
    
      <category term="kafka" scheme="http://simonxia.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka Controller 前瞻</title>
    <link href="http://simonxia.com/kafka-controller-prospects/"/>
    <id>http://simonxia.com/kafka-controller-prospects/</id>
    <published>2018-01-28T07:20:04.000Z</published>
    <updated>2018-03-14T12:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="controller-主要功能">Controller 主要功能</h2><ol type="1"><li>内部状态维护<ul><li>所有 broker 上的 replica 状态</li><li>所有 partition 的 leader 的状态</li></ul></li><li>集群状态改变的输入源<ul><li>监听 zk 上的节点，触发各种事件</li><li>维护到所有 controller 的指令通道</li></ul></li><li>状态改变的控制中心</li></ol><h2 id="目前问题">目前问题</h2><ol type="1"><li>状态转换是并发进行的，因为多个监听器是独立工作，这可能导致多个状态转化同时发生。</li><li>状态在传播时使用的是异步通信，可能导致不同 broker 在特定时间点状态不一致。比如我在<a href="http://simonxia.com/Flume-KafkaSink-Duplicate-Data-During-Kafka&#39;s-controller-election">这篇文章</a>中遇到的情况</li><li>controller 到各个 broker 以及 controller 和 zk 之间的通信效率需要提升</li><li>需要对一些执行时间长的操作（如 partition reassignmen）支持取消操作</li></ol><a id="more"></a><h2 id="新版的一些具体改进">新版的一些具体改进</h2><h3 id="事件及其处理">事件及其处理</h3><p>新版 controller 里放弃以前每个 zk 事件监听器一个线程的模式，改为事件触发的单线程模式</p><p>总体结构如下图：</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/kafka-controller/arch.png"><p>所有的 zk 状态变化都被抽象为 event，每个具体的状态变化事件都继承此抽象类。event 的定义如下</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaControllerEvent</span>(<span class="params">eventType: <span class="type">ControllerEventType</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// A set that tracks the responses from brokers</span></span><br><span class="line">  <span class="keyword">val</span> unAckedNode = <span class="keyword">new</span> mutable.<span class="type">HashSet</span>[<span class="type">Int</span>]</span><br><span class="line">  <span class="keyword">val</span> eventDone = <span class="keyword">new</span> <span class="type">CountDownLatch</span>(<span class="number">1</span>)</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">makeStatesChange</span></span>(currentState: <span class="type">PartitionStateMachine</span>): <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">ClientRequest</span>]</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">controllerRequestCallback</span></span>(response: <span class="type">ClientResponse</span>) &#123;</span><br><span class="line">    handleBrokerResponse(response)</span><br><span class="line">    unAckedNode.remove(response.request().request().destination())</span><br><span class="line">    <span class="keyword">if</span> (unAckedNode.isEmpty)</span><br><span class="line">      eventDone.countDown()</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handleBrokerResponse</span></span>(response: <span class="type">ClientResponse</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中, <code>unAckedNode</code> 维护了所有未确认消息的 borker 集合，只有当该集合为空时，event 才被认为完成。由此保证了状态传播的同步。</p><p>controller 中，一个 event 的处理流程大致如下</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!shutdown)&#123;</span><br><span class="line">    <span class="type">Event</span> event = eventQueue.pollFirst()</span><br><span class="line">    <span class="comment">// Make state change</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> brokerRequests = event.makeStateChange(partitionStateMachine)</span><br><span class="line">        brokerRequests.map &#123; <span class="keyword">case</span> (broker, request) =&gt;</span><br><span class="line">            networkClient.send(request)</span><br><span class="line">            event.unAckedNode.add(broker)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!event.unAckedNode.isEmpty) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                networkClient.poll(timeout)</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="type">KafkaApiException</span> =&gt;</span><br><span class="line">                    <span class="comment">// Do something</span></span><br><span class="line">                <span class="keyword">case</span> <span class="type">Exception</span> =&gt;</span><br><span class="line">                    <span class="comment">// Error handling</span></span><br><span class="line">            &#125;</span><br><span class="line">            checkNodeLivenessAndIgnoreDeadNode()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">StateChangeException</span> =&gt;</span><br><span class="line">            <span class="comment">// handle illegal state change</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>概括就是，每次从队列里取一个，单线程同步依次处理。</p><h3 id="改进-controller-消息">改进 controller 消息</h3><p>目前 kafka 集群的控制消息和数据消息是通过一个队列传递的，并且拥有相同的优先级。这有可能造成 controller 下发的控制消息被其他消息阻塞，从而在一些状态切换中引入问题。 新版的 controller 里提高 controller 到 broker 消息的优先级，达到区分控制消息和数据消息的目的。可参考 <a href="https://issues.apache.org/jira/browse/KAFKA-4453" target="_blank" rel="noopener">KAFKA-4453</a>、<a href="https://issues.apache.org/jira/browse/KAFKA-2139" target="_blank" rel="noopener">KAFKA-2139</a></p><h3 id="重构集群状态管理">重构集群状态管理</h3><p>目前的副本状态和分区状态分别由 <code>ReplicaStateMachine</code> 和 <code>PartitionStateMachine</code> 两个状态机维护，而状态转化本身并不是相互独立的，controller 必须维护这两个状态机中的状态顺序</p><h3 id="改进与-zk-的通信">改进与 zk 的通信</h3><p>目前 controller 与 zk 是同步通信，并且很多消息如 <code>leaderAndIsr</code> 是以分区为粒度的消息，顺序地同步写非常低效。</p><p>从 <a href="http://zookeeper-user.578899.n2.nabble.com/sync-vs-async-vs-multi-performances-td7284355.html" target="_blank" rel="noopener">sync vs. async vs. multi performances</a> 性能测评来看，性能上是 multi &gt; async &gt; sync 。社区的观点是[2]:</p><blockquote><p>除非真的有批处理事务需求，比起批量事务地更新，<em>一个接一个地异步请求把网络跑满</em>是更好的选择。同时，以单个请求为粒度做处理也使逻辑更简洁。</p></blockquote><p>基于此，新版的 controller 会全部替换为 async zk api</p><h2 id="参考资料">参考资料</h2><p>[1][KAFKA-5027](https://issues.apache.org/jira/browse/KAFKA-5027)</p><p>[2][Google Doc: Kafka Controller Redesign](https://docs.google.com/document/d/1rLDmzDOGQQeSiMANP0rC2RYp_L7nUGHzFD9MQISgXYM)</p><p>[3][wiki: Kafka Controller Redesign](https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Controller+Redesign)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;controller-主要功能&quot;&gt;Controller 主要功能&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;内部状态维护
&lt;ul&gt;
&lt;li&gt;所有 broker 上的 replica 状态&lt;/li&gt;
&lt;li&gt;所有 partition 的 leader 的状态&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;集群状态改变的输入源
&lt;ul&gt;
&lt;li&gt;监听 zk 上的节点，触发各种事件&lt;/li&gt;
&lt;li&gt;维护到所有 controller 的指令通道&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;状态改变的控制中心&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;目前问题&quot;&gt;目前问题&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;状态转换是并发进行的，因为多个监听器是独立工作，这可能导致多个状态转化同时发生。&lt;/li&gt;
&lt;li&gt;状态在传播时使用的是异步通信，可能导致不同 broker 在特定时间点状态不一致。比如我在&lt;a href=&quot;http://simonxia.com/Flume-KafkaSink-Duplicate-Data-During-Kafka&amp;#39;s-controller-election&quot;&gt;这篇文章&lt;/a&gt;中遇到的情况&lt;/li&gt;
&lt;li&gt;controller 到各个 broker 以及 controller 和 zk 之间的通信效率需要提升&lt;/li&gt;
&lt;li&gt;需要对一些执行时间长的操作（如 partition reassignmen）支持取消操作&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="infra" scheme="http://simonxia.com/categories/infra/"/>
    
    
      <category term="kafka" scheme="http://simonxia.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Flume KafkaSink Duplicate Data During Kafka&#39;s Controller Election With Error &#39;Cached zkVersion not equal&#39;</title>
    <link href="http://simonxia.com/Flume-KafkaSink-Duplicate-Data-During-Kafka&#39;s-controller-election/"/>
    <id>http://simonxia.com/Flume-KafkaSink-Duplicate-Data-During-Kafka&#39;s-controller-election/</id>
    <published>2018-01-24T14:30:26.000Z</published>
    <updated>2018-03-03T05:36:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="the-full-story">The Full Story</h1><p>we first get realtime data increase alarm</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/flume-kafka/ka-realtime.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><a id="more"></a><p>then we check the producer and consumer, only to find that some consumer was blocked, and some producer got the error</p><pre><code>BrokerNotAvailableError: Could not find the leader</code></pre><p>after check the kafka monitor, we find <code>MessagesInPerSec</code> of some broker fall apparently</p>{% qnimg posts/flume-kafka/ka-MessagesInPerSec-1.png %}<p>This means that although these brokers not die, they were not working properly, some writes of partition maybe fail</p><p>At the same time, there was not partition leader failover according to partition monitor pane</p>{% qnimg posts/flume-kafka/ka-leaderCount.png %}<p>After check zk node <code>/controller_epoch</code>, we find its timestamp coincides with the alarm.</p><p>And there are lots of duplicate log in <code>broker-18-server.log.2018-01-24-13</code></p><pre><code>[2018-01-24 13:07:59,138] INFO Partition [fusion-rtlog-std-prod,21] on broker 18: Cached zkVersion [422946] not equal to that in zookeeper, skip updating ISR (kafka.cluster.Partition)   </code></pre><p>at the same time, broker 18 <code>IsrExpandsPerSec</code> keep a high value</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/flume-kafka/ka-IsrExpandsPerSec.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><h1 id="dive-into-log-and-code">Dive Into Log And Code</h1><p>The abnormal log in <code>broker-18-server.log.2018-01-24-13</code> is produced by function <code>updateISR</code></p><pre><code>Cached zkVersion [%d] not equal to that in zookeeper, skip updating ISR</code></pre><p>and the full call stack is</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updateReplicaLogReadResult </span><br><span class="line">    maybeExpandISR</span><br><span class="line">        updateISR</span><br></pre></td></tr></table></figure><p>function <code>updateReplicaLogReadResult</code> is called when the follower sync message from leader, which means it is called only in partition leader</p><p>But we use <code>bin/kafka-topics.sh --describe</code>, the output tells leader of partition is not broker 18. It seems broker 18’s <code>metaCache</code> is not keep up with controller and zk</p><p>After combing the log, we draw the timeline</p><pre><code> 1. controller 18 expired 2. broker 26 become controller 3. broker 16 become controller </code></pre><p>It seems cluster get stuck after step 3, broker 18 didn’t update leader info after controller 16 was elected.</p><p>Choose one partition <code>fusion-rtlog-std-prod-230</code> to trace the issue</p><p>after controller 16 start, it first hold the state</p><p>broker-16-state-change.log.2018-01-24-13</p><pre><code>[2018-01-24 13:07:59,671] TRACE Broker 16 cached leader info (LeaderAndIsrInfo:(Leader:18,ISR:18,15,23,LeaderEpoch:40,ControllerEpoch:254),ReplicationFactor:3),AllReplicas:15,18,23) for partition fusion-rtlog-std-prod-230 in response to UpdateMetadata request sent by controller 16 epoch 256 with correlation id 1 (state.change.logger)[2018-01-24 13:08:00,011] TRACE Controller 16 epoch 256 sending UpdateMetadata request (Leader:18,ISR:18,15,23,LeaderEpoch:40,ControllerEpoch:254) to broker 18 for partition fusion-rtlog-std-prod-230 (state.change.logger)</code></pre><p>then Isr change, and controller broadcast the <code>UpdateMetadata</code> request broker-16-controller.log.2018-01-24-13</p><pre><code>[2018-01-24 13:08:06,462] DEBUG [IsrChangeNotificationListener] Fired!!! (kafka.controller.IsrChangeNotificationListener)[2018-01-24 13:08:06,485] DEBUG Sending MetadataRequest to Brokers:ArrayBuffer(0, 5, 10, 24, 25, 20, 6, 28, 21, 2, 22, 12, 7, 3, 18, 16, 11, 26, 23, 8, 19, 4, 15) for TopicAndPartitions:Set([fusion-rtlog-std-prod,249], [fusion-rtlog-std-prod,154], [fusion-rtlog-std-prod,2], [qiniuCdnOpenRestyV2,100], [fusion-rtlog-std-prod,40], [fusion-rtlog-std-prod,211], [fusion-rtlog-std-prod,116], [fusion-rtlog-std-prod,59], [qiniuCdnOpenRestyV2,120], [fusion-rtlog-std-prod,230], [fusion-rtlog-std-prod,97], [fusion-rtlog-std-prod,287], [fusion-rtlog-std-prod,268], [fusion-rtlog-std-prod,173], [fusion-rtlog-std-prod,78], [fusion-rtlog-std-prod,192], [fusion-rtlog-std-prod,135]) (kafka.controller.IsrChangeNotificationListener)</code></pre><p>broker-16-state-change.log.2018-01-24-13</p><pre><code>[2018-01-24 13:08:06,551] TRACE Controller 16 epoch 256 sending UpdateMetadata request (Leader:23,ISR:23,LeaderEpoch:41,ControllerEpoch:255) to broker 18 for partition fusion-rtlog-std-prod-230 (state.change.logger)[2018-01-24 13:08:06,563] TRACE Broker 16 cached leader info (LeaderAndIsrInfo:(Leader:23,ISR:23,LeaderEpoch:41,ControllerEpoch:255),ReplicationFactor:3),AllReplicas:15,18,23) for partition fusion-rtlog-std-prod-230 in response to UpdateMetadata request sent by controller 16 epoch 256 with correlation id 7 (state.change.logger)</code></pre><p>broker 18 recieved this <code>UpdateMetadata</code> request</p><pre><code>[2018-01-24 13:08:06,577] TRACE Broker 18 cached leader info (LeaderAndIsrInfo:(Leader:23,ISR:23,LeaderEpoch:41,ControllerEpoch:255),ReplicationFactor:3),AllReplicas:15,18,23) for partition fusion-rtlog-std-prod-230 in response to UpdateMetadata request sent by controller 16 epoch 256 with correlation id 7 (state.change.logger)</code></pre><p>at this time, controller 16 thinks partition <code>fusion-rtlog-std-prod-230</code>’s current leader is 23, but broker 18 still hold the previous meta. <code>UpdateMetadata</code> request never work!</p><p>To make a summary, after step 3:</p><ol start="4" type="1"><li>controller 16 broadcast meta data</li><li>controller 16 get isr change notification</li><li>controller 16 broadcase new meta data</li><li>broker 18 receviced new meta, but not <strong>update</strong></li></ol><p>return to code, object <code>Partition</code> has two related fields</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Partition(val topic: String,</span><br><span class="line">                val partitionId: Int,</span><br><span class="line">                time: Time,</span><br><span class="line">                replicaManager: ReplicaManager) extends Logging with KafkaMetricsGroup &#123;</span><br><span class="line">     <span class="keyword">private</span> var zkVersion: Int = LeaderAndIsr.initialZKVersion</span><br><span class="line">     <span class="meta">@volatile</span> var leaderReplicaIdOpt: Option[Int] = None</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>zkVersion</code> indicas <code>dataVersion</code> in zk data structure of path <code>/brokers/topics/&lt;a topic&gt;/partitions/&lt;id&gt;/state</code>, e.g</li></ul><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/flume-kafka/ka-zk-ds.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><ul><li><code>leaderReplicaIdOpt</code> indicas whether the partition is leader</li></ul><p>It seems the two field in <code>Parition</code> has never been updated</p><h1 id="related-issues">Related Issues</h1><p><a href="https://issues.apache.org/jira/browse/KAFKA-3042" target="_blank" rel="noopener">KAFKA-3042 updateIsr should stop after failed several times due to zkVersion issue</a></p><p><a href="https://issues.apache.org/jira/browse/KAFKA-2729" target="_blank" rel="noopener">KAFKA-2729 Cached zkVersion not equal to that in zookeeper, broker not recovering</a></p><p><a href="https://issues.apache.org/jira/browse/KAFKA-3083" target="_blank" rel="noopener">KAFKA-3083 a soft failure in controller may leave a topic partition in an inconsistent state</a></p><h1 id="solutions">Solutions</h1><p>failover by hand: restart controller</p><p>other workaround</p><ol type="1"><li><p>increase zk timeout config, default is 6000 ms</p><p>zookeeper.connection.timeout.ms=20000 zookeeper.session.timeout.ms=20000</p></li><li><p>jvm gc tunning, sometimes zk timeout is cause by jvm gc</p></li><li><p>reduce partition number on one broker, the more parition we have, the more meta data we need to synchronize, and more traffic on zk, more meta traffic among brokers</p></li><li><p>increase <code>request.timeout.ms</code> on the broker, especially for lots of partitions per broker</p></li></ol><h1 id="future">Future</h1><p>kafka’s controller is being redesign and re-implemented, the progress can be tracked <a href="https://issues.apache.org/jira/browse/KAFKA-5027" target="_blank" rel="noopener">here</a> and the doc: <a href="https://docs.google.com/document/d/1rLDmzDOGQQeSiMANP0rC2RYp_L7nUGHzFD9MQISgXYM/edit" target="_blank" rel="noopener">Kafka Controller Redesign</a></p><p><a href="https://issues.apache.org/jira/browse/KAFKA-5642" target="_blank" rel="noopener">KAFKA-5642 Use async ZookeeperClient in Controller</a> will properly handle ZK session expiration</p><h1 id="something-about-flume">Something about flume</h1><p>posts/flume-kafka-Sink produce messages batch by batch and will retry after some fail write. During controller election, some partition leaders can’t reach. When a batch write happen, some parition will success, but some failed, when posts/flume-kafka-Sink retry, the success part will be duplicated.</p><h1 id="ref">Ref</h1><p>My kafka version is <code>0.10.0.0</code>, all related logs can be found in <a href="https://drive.google.com/file/d/1g7tf2YYP9AuwBYe4yMLVCgxDmmc2d_dc/view?usp=sharing" target="_blank" rel="noopener">kafka-logs.tar.gz</a></p><p><a href="https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Controller+Internals" target="_blank" rel="noopener">Kafka controller internals</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;the-full-story&quot;&gt;The Full Story&lt;/h1&gt;
&lt;p&gt;we first get realtime data increase alarm&lt;/p&gt;
&lt;img src=&quot;http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/flume-kafka/ka-realtime.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim&quot;&gt;
    
    </summary>
    
      <category term="infra" scheme="http://simonxia.com/categories/infra/"/>
    
    
      <category term="kafka" scheme="http://simonxia.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>go channel 的饿死和优先级处理</title>
    <link href="http://simonxia.com/go-channel-%E9%A5%BF%E6%AD%BB%E5%8F%8A%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>http://simonxia.com/go-channel-饿死及优先级/</id>
    <published>2017-11-11T07:56:38.000Z</published>
    <updated>2018-04-11T18:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sarama-引发的血案">sarama 引发的血案</h1><p>最近发现线上的用 go client <a href="https://github.com/Shopify/sarama" target="_blank" rel="noopener">sarama</a> 消费 kafka 出现部分 partition 明显延迟，如下图</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/go-channel-priority/kafka-lag.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><p>查看其代码后，发现消费者的模式是对每个 partition 启动一个 partition consumer，然后一个更上层的 consumer 监听他们。简单概括可以是如下模式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> parition consumer1:</span><br><span class="line">    <span class="keyword">case</span> parition consumer2:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">case</span> parition consumern:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="情景模拟测试">情景模拟测试</h1><p>go 中的 <a href="https://golang.org/ref/spec#Select_statements" target="_blank" rel="noopener">select</a>，当多个case 触发时，使用的是一种伪随机的均匀选择。 specification 中这样描述</p><blockquote><p>If one or more of the communications can proceed, a single one that can proceed is chosen via <em>a uniform pseudo-random selection</em>.</p></blockquote><p>我们可以用一个小程序来模拟验证下上一节的猜想。</p><div><div class="fold_hider"><div class="close hider_title">select_test.go 点击展开隐藏内容</div></div><div class="fold"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">TestChanCnt  = <span class="number">10</span></span><br><span class="line">TestChanSize = <span class="number">100</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">chans := []<span class="keyword">chan</span> <span class="keyword">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; TestChanCnt; i++ &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, TestChanSize)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> dur time.Duration = <span class="number">1</span> * time.Millisecond</span><br><span class="line"><span class="comment">// 模拟写入慢的 channel</span></span><br><span class="line"><span class="comment">// if i == 5 &#123;</span></span><br><span class="line"><span class="comment">// dur = 2 * time.Millisecond</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; TestChanSize; j++ &#123;</span><br><span class="line">c &lt;- <span class="number">1</span></span><br><span class="line">time.Sleep(dur)</span><br><span class="line">&#125;</span><br><span class="line">&#125;(i)</span><br><span class="line">chans = <span class="built_in">append</span>(chans, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cases := <span class="built_in">make</span>([]reflect.SelectCase, <span class="built_in">len</span>(chans))</span><br><span class="line"><span class="keyword">for</span> i, ch := <span class="keyword">range</span> chans &#123;</span><br><span class="line">cases[i] = reflect.SelectCase&#123;Dir: reflect.SelectRecv, Chan: reflect.ValueOf(ch)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">int</span>, TestChanCnt*TestChanSize)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; TestChanCnt*TestChanSize; i++ &#123;</span><br><span class="line">chosen, _, _ := reflect.Select(cases)</span><br><span class="line">result[i] = chosen</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buf := bytes.NewBufferString(<span class="string">"cnt\t"</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; TestChanCnt; i++ &#123;</span><br><span class="line">buf.WriteString(fmt.Sprintf(<span class="string">"chan%d\t"</span>, i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">step := TestChanSize * TestChanCnt / <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> e := step; e &lt; <span class="built_in">len</span>(result); e += step &#123;</span><br><span class="line">buf.WriteString(fmt.Sprintf(<span class="string">"\n%d\t"</span>, e))</span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> stat(result[:e]) &#123;</span><br><span class="line">buf.WriteString(fmt.Sprintf(<span class="string">"%.3f\t"</span>, f))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buf.WriteString(fmt.Sprintf(<span class="string">"\n%d\t"</span>, <span class="built_in">len</span>(result)))</span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> stat(result) &#123;</span><br><span class="line">buf.WriteString(fmt.Sprintf(<span class="string">"%.3f\t"</span>, f))</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(buf.String())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stat</span><span class="params">(a []<span class="keyword">int</span>)</span> <span class="params">(result []<span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">cnt := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, TestChanCnt)</span><br><span class="line">total := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, aa := <span class="keyword">range</span> a &#123;</span><br><span class="line">cnt[aa]++</span><br><span class="line">total++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; TestChanCnt; i++ &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, <span class="keyword">float64</span>(cnt[i])/<span class="keyword">float64</span>(total))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>一次运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cnt   chan0chan1chan2chan3chan4chan5chan6chan7chan8chan9</span><br><span class="line">100   0.1100.1100.1000.0900.1500.0900.1100.1100.0700.060</span><br><span class="line">200   0.1150.1050.1150.0900.1300.0750.1000.1000.0800.090</span><br><span class="line">300   0.1000.1000.1070.0830.1230.1000.1070.1070.0770.097</span><br><span class="line">400   0.1130.0920.1020.0950.1150.0950.0980.1000.0920.098</span><br><span class="line">500   0.1080.0980.1100.1080.1080.0880.0940.0960.0880.102</span><br><span class="line">600   0.1120.1000.1030.1150.1000.0880.0980.0880.0920.103</span><br><span class="line">700   0.1100.1000.0990.1100.0990.0940.0910.0930.0990.106</span><br><span class="line">800   0.1020.1000.1020.1070.1060.0870.0870.0960.1040.106</span><br><span class="line">900   0.1010.0970.1030.1090.1070.0880.0940.0980.0940.109</span><br><span class="line">1000   0.1000.1000.1000.1000.1000.1000.1000.1000.1000.100</span><br></pre></td></tr></table></figure><p>可见在资源充足（channel中有数据可消费）时，基本上 select 的选择是公平的。 但是，当有的 channel 中数据写入过慢时，即在某些时间点上，被写入过慢的 channel 里没有数据供消费，这时被 select 选中的机会自然就让给其他有数据的 channel。 时间一长，在消费端自然就会出现从不同 channel 消费数据倾斜的问题，反应到上面的表格中，就是写入慢的channel 占比明显小于其他 channel。 我们将上面代码中的注释去掉，重新运行得到结果如下，可见 channel5 在前 9 次采样中占比明显降低</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cnt   chan0chan1chan2chan3chan4chan5chan6chan7chan8chan9</span><br><span class="line">100   0.1000.1000.1100.1100.1100.0600.1000.1000.1100.100</span><br><span class="line">200   0.1050.1050.1050.1050.1050.0550.1050.1050.1050.105</span><br><span class="line">300   0.1070.1070.1070.1030.1030.0570.1030.1070.1030.103</span><br><span class="line">400   0.1050.1050.1050.1050.1050.0580.1020.1050.1050.105</span><br><span class="line">500   0.1060.1060.1060.1040.1040.0580.1040.1040.1040.104</span><br><span class="line">600   0.1050.1050.1050.1050.1050.0570.1050.1050.1030.105</span><br><span class="line">700   0.1060.1060.1060.1040.1040.0570.1040.1040.1040.104</span><br><span class="line">800   0.1050.1040.1050.1050.1050.0560.1050.1050.1050.105</span><br><span class="line">900   0.1040.1060.1040.1040.1040.0570.1060.1040.1040.106</span><br><span class="line">1000   0.1000.1000.1000.1000.1000.1000.1000.1000.1000.100</span><br></pre></td></tr></table></figure><p>这在一些业务场景里是不能接受的，比如本文开头提到的消费 kafka 出现部分 partition 延迟过大</p><h1 id="解决方案">解决方案</h1><h2 id="轮询">轮询</h2><p>一种简单的解决方案是轮询所有被监听的 channel，从每个 channel 中消费固定数量的数据。大致代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> minBatch = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> chans &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; minBatch; i++ &#123;</span><br><span class="line">        v := &lt;-c</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种策略每次轮询的耗时由所有 channel 中写入最慢 channel 决定。 它有一个明显的缺点，当有的 channel 在一段时间为空时，此策略会持续阻塞。 在吞吐量可接受的情况，没有空置 channel 的情景里，此方案简单易行。</p><h2 id="带优先级的-channel">带优先级的 channel</h2><p>另一种思路是给不同的 channel 引入不同的优先级，对生产慢的 channel 赋予高优先级。即一旦慢的 channel 中有数据，我们优先对其消费。</p><h3 id="针对-select-的-work-around">针对 select 的 work around</h3><p>go语言原生没有对 channel 的优先级支持，我们可以</p><p>基于 select 随机选的特性，一个简单暴力的办法就是直接增加需要提高权重的 channel 的 case，还能根据优先级配比调整case数量。比如以下代码，abcd 优先级依次递减</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> x = &lt;-a:</span><br><span class="line"><span class="keyword">case</span> x = &lt;-a:</span><br><span class="line"><span class="keyword">case</span> x = &lt;-b:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写比较丑，可以用 <code>reflect.Select()</code> 的channel数组优雅点。</p><p>另一种暴力美学是多个 select 并置，重复上面的例子如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> x := &lt;-a:</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> x := &lt;-a:</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">case</span> x := &lt;-b:</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用 select 的 default 嵌套也行，但是太多会嵌套深，代码不可读。简单例子如下，a 优先级高于b</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> x := &lt;-a:</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> x := &lt;-b:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带条件控制的-case-语句">带条件控制的 case 语句</h3><p>另一种思路是在 case 语句前加入一些条件，通过控制条件来决定优先级，模式如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> condition1 &amp;&amp; x := &lt;-a:</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">case</span> condition2 &amp;&amp; x := &lt;-b:</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制两个 condition 实现优先级，比如 Russ Cox 这个<a href="https://groups.google.com/forum/#!msg/golang-nuts/ChPxr_h8kUM/mntIttBSZDUJ" target="_blank" rel="noopener">例子</a>，非常 tricky，值得玩味</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maybe</span><span class="params">(b <span class="keyword">bool</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span> <span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !b &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-maybe(val&gt;<span class="number">0</span>, p):</span><br><span class="line">    val--</span><br><span class="line"><span class="keyword">case</span> &lt;-v:</span><br><span class="line">    val++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.teigfam.net/oyvind/home/technology/047-priority-select-in-go/" target="_blank" rel="noopener"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;sarama-引发的血案&quot;&gt;sarama 引发的血案&lt;/h1&gt;
&lt;p&gt;最近发现线上的用 go client &lt;a href=&quot;https://github.com/Shopify/sarama&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sarama&lt;/a&gt; 消费 kafka 出现部分 partition 明显延迟，如下图&lt;/p&gt;
&lt;img src=&quot;http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/go-channel-priority/kafka-lag.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim&quot;&gt;
&lt;p&gt;查看其代码后，发现消费者的模式是对每个 partition 启动一个 partition consumer，然后一个更上层的 consumer 监听他们。简单概括可以是如下模式&lt;/p&gt;
&lt;!--�11--&gt;
    
    </summary>
    
      <category term="programming" scheme="http://simonxia.com/categories/programming/"/>
    
    
      <category term="golang" scheme="http://simonxia.com/tags/golang/"/>
    
      <category term="channel" scheme="http://simonxia.com/tags/channel/"/>
    
      <category term="优先级" scheme="http://simonxia.com/tags/%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    
      <category term="sarama" scheme="http://simonxia.com/tags/sarama/"/>
    
  </entry>
  
  <entry>
    <title>无穷数据流的分位数问题</title>
    <link href="http://simonxia.com/%E6%97%A0%E7%A9%B7%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E5%88%86%E4%BD%8D%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://simonxia.com/无穷数据流的分位数问题/</id>
    <published>2017-08-05T14:53:58.000Z</published>
    <updated>2018-06-20T10:28:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>设想这么一个问题：如何统计一段无穷数据流的八十分位值？</p><p>咋听之下问题很无厘头，总量都未知，谈何分位数？而在实践中这样的需求还挺常见的，比如从实时日志里计算某请求速度字段的百分位值，从而对网络质量有一个大致的评估。</p><p>问题的难点在于数据无穷无尽源源不断，而且总量不可提前预估，因为数据到来的速度也是未知的。保留所有数据来计算百分位值代价太过昂贵， O(n) 的空间复杂度显然是不可接受的。</p><p>退一步，能不能通过抽样获取数据的一些分布规律，进而对百分位值进行推算呢？看起来很美好，其实经不起推敲，因为对无穷数据流抽样理论上得到的也是无穷数据流，实践上如果抽样密集，内存消耗依然很快，抽样稀疏则误差完全不可控。</p><p>考虑一个相似的问题，计算无穷数据流的 top N. 因为 N 已知，只需维护一个大小为 N 的堆，将数据从堆中流过即可。任意时刻查看堆，堆中数据即为所求。</p><p>类似地，可否设计一个数据结构，内存占用大小在可控范围内，数据结构能给出足够的信息，使得任意时刻对其查询，都能（在一定误差范围内）返回我们想要的百分位值？</p><a id="more"></a><h1 id="一种解法">一种解法</h1><p><a href="https://www.cs.rutgers.edu/~muthu/bquant.pdf" target="_blank" rel="noopener">Cormode, Korn, Muthukrishnan, and Srivastava. “Effective Computation of Biased Quantiles over Data Streams”</a> 设计了一种数据结构很好地平衡了查询精度和内存占用，比较完美地解决了这个问题。</p><p>求解目标：<em>对于 <span class="math inline">\(p\)</span> 分位的数据，我们能容忍的误差是 <span class="math inline">\(\varepsilon\)</span></em></p><p>对于数据流的每个数据，用一个三元组表示，对第 i 个有 <span class="math inline">\(t_{i} = (v_{i}, g_{i}, \Delta_{i})\)</span>，其中 <span class="math inline">\(v_{i}\)</span> 是每个数据的值，<span class="math inline">\(g_{i}\)</span> 表示第 <span class="math inline">\(i\)</span> 个数据的最低可能排名与第 <span class="math inline">\(i-1\)</span> 个数据最低可能排名之差，<span class="math inline">\(\Delta_{i}\)</span> 表示第 i 个数据的最高可能排名与最低可能排名之差。</p><p>对于某个值 <span class="math inline">\(v_{i}\)</span>，令 <span class="math inline">\(r_{i} = \sum_{j=1}^{i-1}g_{i}\)</span>，则 <span class="math inline">\(v_{i}\)</span> 的真实排名在区间 <span class="math inline">\([r_{i} + g_{i}, r_{i} + g_{i} + \Delta_{i}]\)</span> 中。</p><p>另外，任意时刻，对任意数据 <span class="math inline">\(i\)</span> 保持一个约束: <span class="math inline">\(g_{i} + \Delta_{i} \leq f(r_{i}, n)\)</span>， 其中 <span class="math inline">\(f(r_{i}, n) = 2r_{i}\varepsilon\)</span>，n 为已出现的数据总量。</p><h2 id="算法">算法</h2><h3 id="插入">插入</h3><p>对每个新插入的数据 v，在已有数据中寻找满足 <span class="math inline">\(v_{i} &lt; v &lt; v_{i+1}\)</span> 的 <span class="math inline">\(i\)</span>，计算 <span class="math inline">\(r_{i}\)</span>，进而得到三元组 <span class="math inline">\((v, g = 1, \Delta=\left \lfloor f(r_{i}, n) \right \rfloor -1)\)</span></p><p>因为 <span class="math inline">\(v\)</span> 的排名至少比 <span class="math inline">\(v_{i}\)</span> 大 1，故 <span class="math inline">\(g=1\)</span></p><p>注意对最大或最小的数据插入时，<span class="math inline">\(\Delta = 0\)</span></p><h3 id="压缩">压缩</h3><p>每次压缩时，对于相邻的两个数据 <span class="math inline">\((v_{i}, g_{i}, \Delta_{i}), (v_{i+1}, g_{i+1}, \Delta_{i+1})\)</span>，当他们满足 <span class="math inline">\(g_{i} + g_{i+1} + \Delta_{i+1} \leq f(r_{i}, n)\)</span> 时，将其合并为 <span class="math inline">\((v_{i+1}, g_{i} + g_{i+1}, \Delta_{i+1})\)</span></p><p>可见，这个合并对于 <span class="math inline">\(g\)</span> 和 <span class="math inline">\(\Delta\)</span> 的语义是没有改变的</p><h3 id="查询">查询</h3><p>对于一个具体的待查询的百分位 <span class="math inline">\(p, 0 \leq p \leq 1\)</span>，找到满足 <span class="math inline">\(r_{i} + g_{i} + \Delta_{i} &gt; pn + 1/2 * f(pn, n)\)</span> 的最小的 <span class="math inline">\(i\)</span>，则第 <span class="math inline">\(i-1\)</span> 个元素即为所求。</p><h2 id="正确性验证">正确性验证</h2><p>验证从两方面入手 1. 插入和压缩操作均保持了约束条件不变 2. 在约束条件不变的条件下，查询操作正确</p><p>先看第一点，对于每个新元素，<span class="math inline">\(g+\Delta = 1+ \left \lfloor f(r_{i}, n) \right \rfloor -1 &lt;= f(r_{i}, n)\)</span> 约束成立。在新元素插入位置之前的元素，关系不变。在新元素插入之后的元素 <span class="math inline">\(r_{i}\)</span> 比以前大 1，则 <span class="math inline">\(f(r_{i}, n)\)</span> 比以前更大，对这些约束依然成立。对于压缩操作，显然约束成立因为压缩的前提就是满足约束。</p><p>再看查询条件 <span class="math inline">\(r_{i} + g_{i} + \Delta_{i} &gt; pn + 1/2 * f(pn, n)\)</span>，不等式左边表示 <span class="math inline">\(v_{i}\)</span> 可能排名的最大值，右边 <span class="math inline">\(pn\)</span>是理论上的分位值，<span class="math inline">\(pn + 1/2 * f(pn, n)\)</span> 即为在允许误差范围内的最大可能值</p><h2 id="进一步优化">进一步优化</h2><p>对所有分位数用相同的精度有时挺浪费，特别在精度小的场景。有时对于不同的分位数，我们期待不同精度，通常是分位越大精度要求越高，例如对 80 分位值误差要求 1%，对 95 分位值误差要求 0.1%。</p><p>对约束函数优化，假设有若干个配置对 <span class="math inline">\(T = \{(p_{j}, \varepsilon_{j})\}\)</span>，修改约束函数如下</p><p><span class="math display">\[\left\{\begin{matrix} f_{j}(r_{i}, n) = \frac{2\varepsilon (n - r_{i})}{1 - p_{j}} &amp; 0 \leq r_{i} \leq p_{j}n  \\f_{j}(r_{i}, n) = \frac{2\varepsilon r_{i}}{p_{j}} ,&amp; p_{j}n \leq r_{i} \leq n  \end{matrix}\right.\]</span></p><p>每次取 <span class="math inline">\(f(r_{i}, n) = min_{j}(f_{j}(r_{i}, n))\)</span>，和之前一样，对任意数据 <span class="math inline">\(i\)</span> 保持一个约束: <span class="math inline">\(g_{i} + \Delta_{i} \leq f(r_{i}, n)\)</span></p><h1 id="实现">实现</h1><p>根据 paper 的思路，我写了一个 golang 的实现 <a href="https://github.com/simon-xia/fuzzyQuantile" target="_blank" rel="noopener">github.com/simon-xia/fuzzyQuantile</a>，采用插入缓存和异步批量保存压缩的方式。</p><p>测试下来性能非常不错。一个 test csae 如下，用我笔记本跑，插入 1000万 数据用时仅 4 秒多，占用内存仅 3143 个单位，相当于 99.96857% 的数据都被过滤掉了。查询精度也符合预期。</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/流处理中的分位数问题/benchmark.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设想这么一个问题：如何统计一段无穷数据流的八十分位值？&lt;/p&gt;
&lt;p&gt;咋听之下问题很无厘头，总量都未知，谈何分位数？而在实践中这样的需求还挺常见的，比如从实时日志里计算某请求速度字段的百分位值，从而对网络质量有一个大致的评估。&lt;/p&gt;
&lt;p&gt;问题的难点在于数据无穷无尽源源不断，而且总量不可提前预估，因为数据到来的速度也是未知的。保留所有数据来计算百分位值代价太过昂贵， O(n) 的空间复杂度显然是不可接受的。&lt;/p&gt;
&lt;p&gt;退一步，能不能通过抽样获取数据的一些分布规律，进而对百分位值进行推算呢？看起来很美好，其实经不起推敲，因为对无穷数据流抽样理论上得到的也是无穷数据流，实践上如果抽样密集，内存消耗依然很快，抽样稀疏则误差完全不可控。&lt;/p&gt;
&lt;p&gt;考虑一个相似的问题，计算无穷数据流的 top N. 因为 N 已知，只需维护一个大小为 N 的堆，将数据从堆中流过即可。任意时刻查看堆，堆中数据即为所求。&lt;/p&gt;
&lt;p&gt;类似地，可否设计一个数据结构，内存占用大小在可控范围内，数据结构能给出足够的信息，使得任意时刻对其查询，都能（在一定误差范围内）返回我们想要的百分位值？&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://simonxia.com/categories/programming/"/>
    
    
      <category term="streaming" scheme="http://simonxia.com/tags/streaming/"/>
    
      <category term="分位数" scheme="http://simonxia.com/tags/%E5%88%86%E4%BD%8D%E6%95%B0/"/>
    
      <category term="quantile" scheme="http://simonxia.com/tags/quantile/"/>
    
  </entry>
  
  <entry>
    <title>《统计学习方法》全部习题解答</title>
    <link href="http://simonxia.com/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E5%85%A8%E9%83%A8%E4%B9%A0%E9%A2%98%E8%A7%A3%E7%AD%94/"/>
    <id>http://simonxia.com/统计学习方法全部习题解答/</id>
    <published>2017-03-21T00:56:38.000Z</published>
    <updated>2018-06-14T00:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近着手做一个流量预测方面的东西，重新刷一遍蓝皮书巩固下基础知识。</p><h1 id="第一章-概论">第一章 概论</h1><h2 id="section">1.1</h2><blockquote><p>说明伯努利模型的极大似然估计以及贝叶斯估计中的统计学习方法三要素</p></blockquote><h3 id="努利模型的极大似然估计">1.1.1 努利模型的极大似然估计</h3><p>设 <span class="math inline">\(X \sim b(1, p)\)</span>, 则 <span class="math inline">\(X\)</span> 的分布律为</p><p><span class="math display">\[P\{X=x\} = p^{x}(1-p)^{1-x},  \ \ \ \  x = 0, 1\]</span></p><p>假设 <span class="math inline">\(x_{1}, x_{2},\cdots , x_{n}\)</span> 是对应于样本 <span class="math inline">\(X\)</span> 的取值，则似然函数为</p><p><span class="math display">\[L(p) = \prod_{i = 1}^{n}p^{x_{i}}(1-p)^{1-x_{i}} = p^{\sum_{i=1}^{n}x_{i}}(1-p)^{n-\sum_{i=1}^{n}x_{i}}\]</span></p><p>取对数:</p><p><span class="math display">\[\ln L(p) = (\sum_{i=1}^{n}x_{i})\ln p+ (n - \sum_{i=1}^{n}x_{i})\ln (1-p)\]</span></p><p>对 p 求导</p><p><span class="math display">\[\frac{\mathrm{d} }{\mathrm{d} p} \ln L(p)  = \frac{\sum_{i=1}^{n}x_{i}}{p} - \frac{n - \sum_{i=1}^{n}x_{i}}{1-p} = 0\]</span></p><p>解得 p 的极大似然估计值为</p><p><span class="math display">\[\hat{p} =  \frac{\sum_{i=1}^{n}x_{i}}{n} \]</span></p><p>故，当有 k 个 <span class="math inline">\(x_{i}\)</span> 取值为 1 时， <span class="math inline">\(\hat{p} = \frac{k}{n}\)</span></p><a id="more"></a><h3 id="努利模型的贝叶斯估计">1.1.2 努利模型的贝叶斯估计</h3><p>由于对 <span class="math inline">\(X \sim b(1, p)\)</span> 中的 <span class="math inline">\(p\)</span> 一无所知，可以将其假设为区间 <span class="math inline">\([0,1]\)</span> 上的均匀分布，即 <span class="math inline">\(p\)</span> 的先验分布为 <span class="math inline">\(\pi(p) = 1\)</span></p><p>伯努利模型的概率密度函数，即为样本 X 与参数 p 的联合概率分布为</p><p><span class="math display">\[h(x, p) = \binom{n}{k}p^{k}(1-p)^{n-k}\]</span></p><p>则其关于 X 的边缘分布为</p><p><span class="math display">\[m(x) = \int_{0}^{1} \binom{n}{k}p^{k}(1-p)^{n-k} dp = \binom{n}{k}B(k+1, n-k+1)\]</span></p><p>由此求得 p 的条件概率密度为</p><p><span class="math display">\[\pi(p|x) = \frac{h(x,p)}{m(x)} = \frac{p^{k}(1-p)^{n-k}}{B(k+1, n-k+1)}\]</span></p><p>则它的期望为</p><p>$$ E((p|x)) = p(p|x) dp = _{0}^{1}  dp =  = </p><p>$$</p><h3 id="三要素">1.1.3 三要素</h3><p>模型：均为伯努利模型</p><p>策略：极大似然估计的策略是最大化似然函数，贝叶斯估计的策略是求参数的期望</p><p>算法：详细过程如上</p><h2 id="section-1">1.2</h2><blockquote><p>通过经验风险最小化推导极大似然估计，证明模型是条件概率分布，当损失函数为对数损失函数时，经验风险最小化等价于极大似然估计。</p></blockquote><p>模型是条件概率分布 <span class="math inline">\(P(Y|X)\)</span>. 损失函数为对数损失，则经验风险为</p><p><span class="math display">\[R_{emp} = \frac{\sum_{i=1}^{N}{L(y_{i},f(x_{i}))}}{N} = \frac{-\sum_{i=1}^{N}{\log P(y_{i}|x_{i})}}{N} = \frac{-\log \prod_{i=1}^{N}{P(y_{i}|x_{i})}}{N}\]</span></p><p>使其最小，则求解目标为</p><p><span class="math display">\[\hat{\Theta} =  \underset{\Theta }{argmin}\frac{-\log \prod_{i=1}^{N}{P(y_{i}|x_{i}, \Theta)}}{N}\]</span></p><p>由极大似然估计法</p><p><span class="math display">\[L(y_{1}, y_{2},\cdots , y_{n}|x_{1}, x_{2},\cdots , x_{n}) = \prod_{i=1}^{N}{P(y_{i}|x_{i}, \Theta})\]</span></p><p>求解目标为</p><p><span class="math display">\[\hat{\Theta} = \underset{\Theta }{argmax} \prod_{i=1}^{N}{P(y_{i}|x_{i}, \Theta)}\]</span></p><p>因为 log(x) 为单调函数，去除负号，忽略常数项 <span class="math inline">\(\frac{1}{N}\)</span>，可见两者求解目标一致，故等价</p><h1 id="第二章-感知机">第二章 感知机</h1><h2 id="section-2">2.1</h2><blockquote><p>Minsky和Papert指出：感知机因为是线性模型，所以不能表示复杂的函数，如异或。验证感知机为什么不能表示异或</p></blockquote><p>一个异或的样本如下</p><table><thead><tr class="header"><th>x1</th><th>x2</th><th>y</th></tr></thead><tbody><tr class="odd"><td>1</td><td>1</td><td>1</td></tr><tr class="even"><td>-1</td><td>-1</td><td>1</td></tr><tr class="odd"><td>1</td><td>-1</td><td>-1</td></tr><tr class="even"><td>-1</td><td>1</td><td>-1</td></tr></tbody></table><p>假设存在一个线性分割 <span class="math inline">\(wx + b = y\)</span>，带入四个样本：</p><p><span class="math display">\[\left\{\begin{matrix}w_{1} + w_{2} + b = 1 &amp;  (1)\\ - w_{1} - w_{2} + b = 1 &amp;  (2)\\ - w_{1} + w_{2} + b = -1 &amp;  (3)\\ w_{1} - w_{2} + b = -1 &amp;  (4)\\ \end{matrix}\right.\]</span></p><p>联立1,2得 b = 1， 联立3，4 得 b=-1，该方程组无解。故不存在这样的线性分割</p><h2 id="section-3">2.2</h2><blockquote><p>模仿例题 2.1，构建从训练数据集求解感知机模型的例子.</p></blockquote><p>选取一个线性可分的数据集，以 <a href="https://github.com/pbharrin/machinelearninginaction/blob/master/Ch06/testSet.txt" target="_blank" rel="noopener">ml in action 中的一个数据集</a> 为例</p><div><div class="fold_hider"><div class="close hider_title">testSet.txt 点击展开隐藏内容</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">3.5424851.977398-1</span><br><span class="line">3.0188962.556416-1</span><br><span class="line">7.551510-1.5800301</span><br><span class="line">2.114999-0.004466-1</span><br><span class="line">8.1271131.2743721</span><br><span class="line">7.108772-0.9869061</span><br><span class="line">8.6106392.0467081</span><br><span class="line">2.3262970.265213-1</span><br><span class="line">3.6340091.730537-1</span><br><span class="line">0.341367-0.894998-1</span><br><span class="line">3.1259510.293251-1</span><br><span class="line">2.123252-0.783563-1</span><br><span class="line">0.887835-2.797792-1</span><br><span class="line">7.139979-2.3298961</span><br><span class="line">1.696414-1.212496-1</span><br><span class="line">8.1170320.6234931</span><br><span class="line">8.497162-0.2666491</span><br><span class="line">4.6581913.507396-1</span><br><span class="line">8.1971811.5451321</span><br><span class="line">1.2080470.213100-1</span><br><span class="line">1.928486-0.321870-1</span><br><span class="line">2.175808-0.014527-1</span><br><span class="line">7.8866080.4617551</span><br><span class="line">3.223038-0.552392-1</span><br><span class="line">3.6285022.190585-1</span><br><span class="line">7.407860-0.1219611</span><br><span class="line">7.2863570.2510771</span><br><span class="line">2.301095-0.533988-1</span><br><span class="line">-0.232542-0.547690-1</span><br><span class="line">3.457096-0.082216-1</span><br><span class="line">3.023938-0.057392-1</span><br><span class="line">8.0150030.8853251</span><br><span class="line">8.9917480.9231541</span><br><span class="line">7.916831-1.7817351</span><br><span class="line">7.616862-0.2179581</span><br><span class="line">2.4509390.744967-1</span><br><span class="line">7.270337-2.5078341</span><br><span class="line">1.749721-0.961902-1</span><br><span class="line">1.803111-0.176349-1</span><br><span class="line">8.8044613.0443011</span><br><span class="line">1.231257-0.568573-1</span><br><span class="line">2.0749151.410550-1</span><br><span class="line">-0.743036-1.736103-1</span><br><span class="line">3.5365553.964960-1</span><br><span class="line">8.4101430.0256061</span><br><span class="line">7.382988-0.4787641</span><br><span class="line">6.960661-0.2453531</span><br><span class="line">8.2344600.7018681</span><br><span class="line">8.168618-0.9038351</span><br><span class="line">1.534187-0.622492-1</span><br><span class="line">9.2295182.0660881</span><br><span class="line">7.8862420.1918131</span><br><span class="line">2.893743-1.643468-1</span><br><span class="line">1.870457-1.040420-1</span><br><span class="line">5.286862-2.3582861</span><br><span class="line">6.0805730.4188861</span><br><span class="line">2.5443141.714165-1</span><br><span class="line">6.016004-3.7537121</span><br><span class="line">0.926310-0.564359-1</span><br><span class="line">0.870296-0.109952-1</span><br><span class="line">2.3693451.375695-1</span><br><span class="line">1.363782-0.254082-1</span><br><span class="line">7.279460-0.1895721</span><br><span class="line">1.8960050.515080-1</span><br><span class="line">8.102154-0.6038751</span><br><span class="line">2.5298930.662657-1</span><br><span class="line">1.963874-0.365233-1</span><br><span class="line">8.1320480.7859141</span><br><span class="line">8.2459380.3723661</span><br><span class="line">6.5438880.4331641</span><br><span class="line">-0.236713-5.766721-1</span><br><span class="line">8.1125930.2958391</span><br><span class="line">9.8034251.4951671</span><br><span class="line">1.497407-0.552916-1</span><br><span class="line">1.336267-1.632889-1</span><br><span class="line">9.205805-0.5864801</span><br><span class="line">1.966279-1.840439-1</span><br><span class="line">8.3980121.5849181</span><br><span class="line">7.239953-1.7642921</span><br><span class="line">7.5562010.2411851</span><br><span class="line">9.0155090.3450191</span><br><span class="line">8.266085-0.2309771</span><br><span class="line">8.5456202.7887991</span><br><span class="line">9.2959691.3463321</span><br><span class="line">2.4042340.570278-1</span><br><span class="line">2.0377720.021919-1</span><br><span class="line">1.727631-0.453143-1</span><br><span class="line">1.979395-0.050773-1</span><br><span class="line">8.092288-1.3724331</span><br><span class="line">1.6676450.239204-1</span><br><span class="line">9.8543031.3651161</span><br><span class="line">7.921057-1.3275871</span><br><span class="line">8.5007571.4923721</span><br><span class="line">1.339746-0.291183-1</span><br><span class="line">3.1075110.758367-1</span><br><span class="line">2.6095250.902979-1</span><br><span class="line">3.2635851.367898-1</span><br><span class="line">2.912122-0.202359-1</span><br><span class="line">1.7317860.589096-1</span><br><span class="line">2.3870031.573131-1</span><br></pre></td></tr></table></figure></div></div><p>分别以原始形式和对偶形式编码求解作图</p><div><div class="fold_hider"><div class="close hider_title">2.2.py 点击展开隐藏内容</div></div><div class="fold"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">original_form_train</span><span class="params">(data, yita)</span>:</span></span><br><span class="line">    dim = data.shape[<span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">    w = np.zeros(dim)</span><br><span class="line">    b = <span class="number">0</span></span><br><span class="line">    unchange = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> unchange:</span><br><span class="line">        unchange = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> idx, row <span class="keyword">in</span> data.sample(frac=<span class="number">1</span>).iterrows(): <span class="comment"># sample method shuffle rows</span></span><br><span class="line">            <span class="keyword">if</span> row[dim] * (np.dot(w, row[:dim]) + b) &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            unchange = <span class="keyword">False</span></span><br><span class="line">            w += yita * row[dim] * row[:dim]</span><br><span class="line">            b += yita*row[dim]</span><br><span class="line">    <span class="keyword">return</span> w, b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dual_form_train</span><span class="params">(data, yita)</span>:</span></span><br><span class="line">    alpha = np.zeros(data.shape[<span class="number">0</span>])</span><br><span class="line">    b = <span class="number">0</span></span><br><span class="line">    gram = np.dot(data[[<span class="number">0</span>,<span class="number">1</span>]], data[[<span class="number">0</span>,<span class="number">1</span>]].T)</span><br><span class="line">    unchange = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> unchange:</span><br><span class="line">        unchange = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> idx, row <span class="keyword">in</span> data.iterrows():</span><br><span class="line">            <span class="keyword">if</span> row[<span class="number">2</span>] * (np.dot(alpha * data[<span class="number">2</span>], gram[:][idx])  + b) &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            unchange = <span class="keyword">False</span></span><br><span class="line">            alpha[idx] += yita</span><br><span class="line">            b += yita*row[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> np.dot(alpha*data[<span class="number">2</span>], data.iloc[:,:<span class="number">2</span>]), b</span><br><span class="line"></span><br><span class="line">d = pd.read_csv(<span class="string">"testSet.txt"</span>,  sep=<span class="string">"\t"</span>, header=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">yita = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">w1, b1 = original_form_train(d, yita)</span><br><span class="line">print(w1, b1) </span><br><span class="line"></span><br><span class="line">w2, b2 = dual_form_train(d, yita)</span><br><span class="line">print(w2, b2) </span><br><span class="line"></span><br><span class="line">plt.scatter(d[d[<span class="number">2</span>]==<span class="number">1</span>][<span class="number">0</span>], d[d[<span class="number">2</span>]==<span class="number">1</span>][<span class="number">1</span>], c=<span class="string">"g"</span>)</span><br><span class="line">plt.scatter(d[d[<span class="number">2</span>]==<span class="number">-1</span>][<span class="number">0</span>], d[d[<span class="number">2</span>]==<span class="number">-1</span>][<span class="number">1</span>], c=<span class="string">"r"</span>)</span><br><span class="line"></span><br><span class="line">x1 = np.linspace(d[<span class="number">0</span>].min(), d[<span class="number">0</span>].max(), <span class="number">1000</span>)</span><br><span class="line">x21 = (-b1 - w1[<span class="number">0</span>]*x1) / w1[<span class="number">1</span>]</span><br><span class="line">x22 = (-b2 - w2[<span class="number">0</span>]*x1) / w2[<span class="number">1</span>]</span><br><span class="line">plt.plot(x1, x21, c=<span class="string">'k'</span>)</span><br><span class="line">plt.plot(x1, x22, c=<span class="string">'b'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div></div><p>画出结果如下：</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/统计学习方法全部习题解答/2.2_plot.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><h2 id="section-4">2.3</h2><blockquote><p>证明：样本集线性可分的充分必要条件是正实例点集和负实例点集所构成的凸壳互不相交</p></blockquote><ol type="1"><li>必要性证明，即线性可分 =&gt; 凸壳不相交</li></ol><p>由样本集线性可分可知，存在平面 <span class="math inline">\(\omega \cdot x + b = 0\)</span> 使得对任意正样本 <span class="math inline">\(x_{+}\)</span> 有 <span class="math inline">\(\omega \cdot x_{+} + b &gt; 0\)</span></p><p>带入凸壳定义: <span class="math inline">\(conv(S) = \left \{ x= \sum_{i=1}^{k} \lambda_{i}x_{i} | \sum_{i=1}^{k}\lambda_{i}=1, \lambda_{i}\geq 0, i=1,2,\cdots,k \right \}\)</span></p><p><span class="math display">\[\omega \cdot x_{+} + b = \omega \cdot \sum_{i=1}^{k} \lambda_{i}x_{i} + b =  \sum_{i=1}^{k} \lambda_{i} (\omega \cdot x_{i} + b ) &gt; 0\]</span></p><p>即所有正样本构成的凸壳均满足 <span class="math inline">\(\omega \cdot x + b &gt; 0\)</span></p><p>同理，对于负样本构成的凸壳有 <span class="math inline">\(\omega \cdot x + b &lt; 0\)</span>, 若两凸壳相交，则交集中的点必然同时满足两个不等式，显然不成立，故两凸壳不相交。</p><ol start="2" type="1"><li>充分性证明，即凸壳不相交 =&gt; 线性可分</li></ol><p>定义两凸壳的距离为两凸壳中最近两点的距离，即令 <span class="math inline">\(x_{+}\)</span> 属于正样本凸壳 <span class="math inline">\(S_{+}\)</span>, <span class="math inline">\(x_{-}\)</span> 属于负样本凸壳 <span class="math inline">\(S_{-}\)</span>， 则两凸壳间距离为: <span class="math inline">\(d = min \left (\left \| x_{+} - x_{-} \right \| \right )\)</span></p><p>设取到最短距离时的正负样本 <span class="math inline">\(x\)</span> 分别为 <span class="math inline">\(x_{min+}\)</span>,<span class="math inline">\(x_{min-}\)</span>，构造平面 <span class="math inline">\(\omega \cdot x + b = 0\)</span> 其中</p><p><span class="math display">\[\omega = x_{min+} - x_{min-} \]</span> <span class="math display">\[b = -\frac{x_{min+} \cdot x_{min+} - x_{min-} \cdot x_{min-}}{2}\]</span></p><p>则对所有 <span class="math inline">\(x\)</span>:</p><p><span class="math display">\[\omega \cdot x + b = (x_{min+} - x_{min-}) \cdot x  -\frac{x_{min+} \cdot x_{min+} - x_{min-} \cdot x_{min-}}{2} = \frac{\left \| x_{min-} - x \right \|^{2} - \left \| x_{min+} - x \right \|^{2}}{2}\]</span></p><p>下面以某个正样本 <span class="math inline">\(x\)</span> 为例，证明 <span class="math inline">\(\left \| x_{min-} - x \right \|^{2} - \left \| x_{min+} - x \right \|^{2}\)</span> &gt; 0 即线段 <span class="math inline">\(xx_{min-} &gt; xx_{min+}\)</span>。</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/统计学习方法全部习题解答/conv_overview.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><p>用反证法，假设线段 <span class="math inline">\(xx_{min-} &lt; xx_{min+}\)</span> ，过 <span class="math inline">\(x_{min-}\)</span> 向 <span class="math inline">\(xx_{min+}\)</span> 做垂线交于点K。如下图所示</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/统计学习方法全部习题解答/conv_triangle.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><p>由凸壳的性质 <span class="math inline">\(x,x_{min+}\)</span> 均在凸壳 <span class="math inline">\(S_{+}\)</span> 内，则它们连线上的点 K 也在凸壳 <span class="math inline">\(S_{+}\)</span> 内。由直角三角形性质易得线段 <span class="math inline">\(Kx_{min-} &lt; x_{min-}x_{min+}\)</span> 这与 <span class="math inline">\(x_{min-}x_{min+}\)</span> 是两凸壳最短距离的点矛盾，故对于位于正样本凸壳中的任意 <span class="math inline">\(x\)</span> 有 <span class="math inline">\(xx_{min-} &gt; xx_{min+}\)</span>. 从而使式 满足 <span class="math inline">\(\omega \cdot x + b &gt; 0\)</span></p><p>负样本同理，至此，线性可分得证。</p><h1 id="第三章-knn">第三章 kNN</h1><h2 id="section-5">3.2</h2><blockquote><p>利用例题3.2构造的 kd 树求点 <span class="math inline">\(x = (3,4.5)^{T}\)</span> 的最邻近点.</p></blockquote><ol type="1"><li>从根节点 (7, 2) 开始, 3 &lt; 7 进入左儿子 (5,4), 4.5 &gt; 4 进入左儿子 (4, 7), 计算欧氏距离为 2.69, 即当前小距离 <span class="math inline">\(d_{min} = 2.69\)</span></li><li>向上回退到父节点 (5, 4) 计算距离为 2.06, 更新 <span class="math inline">\(d_{min} = 2.06\)</span></li><li>检查 (5, 4) 的另一个子节点 (2, 3)，计算距离为 1.803，即（2，3）位于以 (3,4.5) 为圆心，当前 <span class="math inline">\(d_{min} = 2.06\)</span> 为半径的超球体内，故将 (2,3) 作为当前最近点. 更新 <span class="math inline">\(d_{min} = 1.803\)</span></li><li>当前最近点 (2,3) 为叶节点，回退直到根 (7,2), (7, 2) 到目标点距离为 4.72, 不满足条件</li><li>检查根节点 (7,2) 的另一个子节点 (9,6), 计算距离为 6.18，在步骤3所述的超球体外，搜索结束，最近点为 (2,3)。</li></ol><h2 id="section-6">3.3</h2><blockquote><p>参照算法 3.3，写出输出为 x 的 K 近邻的算法。</p></blockquote><p>将以前算法的「当前最近点」替换为「当前最近点最小堆」即可。具体地</p><ul><li>以前的「比当前最小距离小」替换为「比当前最小堆中的最大距离小」</li><li>以前的「是否替换当前最近点」替换为「是否插入最小堆」</li></ul><h1 id="第四章-朴素贝叶斯">第四章 朴素贝叶斯</h1><h2 id="section-7">4.1</h2><blockquote><p>用极大似然估计法推出朴素贝叶斯法中的概率估计公式(4.8)及公式(4.9)</p></blockquote><p>令 <span class="math inline">\(P\left ( Y = c_{k} \right ) = p\)</span>，则 <span class="math inline">\(P\left ( Y \neq c_{k} \right ) = 1 - p\)</span>. 即 <span class="math inline">\(P\left ( Y = c_{k} \right )\)</span> 服从伯努利分布。则公式(4.8) 证明同 1.1.1</p><p>令 <span class="math inline">\(P\left ( Y = c_{k}, X^{j} = x^{j} \right ) = p\)</span>，则 <span class="math inline">\(P\left ( Y = c_{k}, X^{j} \neq x^{j} \right ) = 1 - p\)</span>. 即 <span class="math inline">\(P\left ( Y = c_{k}, X^{j} = x^{j} \right )\)</span> 服从伯努利分布。则公式(4.9) 证明同 1.1.1</p><h2 id="section-8">4.2</h2><blockquote><p>用贝叶斯估计法推出朴素贝叶斯法中的概率估计公式(4.10)及公式(4.11)</p></blockquote><p>由题意，Y 本身服从多项式分布，即</p><p><span class="math display">\[P(Y|\pi) = \pi_{1}^{\sum_{i=1}^{N}I(y_{i} = c_{1})} ...\pi_{k}^{\sum_{i=1}^{N}I(y_{i} = c_{k})}\]</span></p><p>由于 Dirichlet 分布是多项式分布的共轭先验，因此我们假设 <span class="math inline">\(P_{\lambda}(Y=c_{i}) = \pi_{i}\)</span>, <span class="math inline">\(\pi_{i}\)</span> 服从参数为 <span class="math inline">\(\lambda\)</span> 的 Dirichlet 分布，在 Y 有 k 类的情况下有：</p><p><span class="math display">\[P(\pi_{1}, ... ,\pi_{k}) = \frac{1}{B(\lambda)}\prod_{K}^{i=1}\pi_{i}^{\lambda - 1}\]</span></p><p>根据 <span class="math inline">\(\pi\)</span> 的先验分布，我们写出后验分布如下:</p><p><span class="math display">\[P(\pi|Y) = \frac{P(Y|\pi)*P(\pi)}{\int P(Y|\pi)*P(\pi)d\pi} \]</span></p><p>即</p><p><span class="math display">\[P(\pi|Y) \propto P(Y|\pi)*P(\pi) =  \prod_{K}^{i=1}\pi_{i}^{\lambda +  \sum_{i=1}^{N}I(y_{i} = c_{k})- 1}\]</span></p><p>也就是说，后验概率也满足 Dirichlet 分布，对其求期望有</p><p><span class="math display">\[E(\pi_{i}|Y) = \frac{\lambda +  \sum_{i=1}^{N}I(y_{i} = c_{k})}{N + K\lambda}\]</span></p><h1 id="第五章-决策树">第五章 决策树</h1><h2 id="section-9">5.1</h2><blockquote><p>根据表5.1所给的训练数据集，利用信息增益比生成决策树</p></blockquote><p>设年龄，工作，有房，信贷特征分别为 <span class="math inline">\(A_{1},A_{2},A_{3},A_{4}\)</span> 则有:</p><p><span class="math display">\[H(D) = - \sum_{i=1}^{n}{\frac{|C_{i}|}{|D|}} \log \frac{|C_{i}|}{|D|}  = 0.971\]</span></p><p><span class="math display">\[H_{A_{1}}(D) = - \sum_{i=1}^{n}{\frac{|D_{i}|}{|D|}} \log \frac{|D_{i}|}{|D|} = - 3* \frac{5}{15}\log\frac{5}{15} = 1.585\]</span></p><p><span class="math display">\[H_{A_{2}}(D) = - (\frac{5}{15}\log\frac{5}{15} + \frac{10}{15}\log\frac{10}{15}) = 0.919\]</span></p><p><span class="math display">\[H_{A_{3}}(D) = - (\frac{6}{15}\log\frac{6}{15} + \frac{9}{15}\log\frac{9}{15}) = 0.971\]</span></p><p><span class="math display">\[H_{A_{4}}(D) = - (\frac{5}{15}\log\frac{5}{15} + \frac{6}{15}\log\frac{6}{15}+ \frac{4}{15}\log\frac{4}{15}) = 1.565\]</span></p><p><span class="math display">\[g_{R}(D,A_{1}) = \frac{g(D,A_{1})}{H_{A_{1}}(D)} = \frac{H(D) - H(D|A)}{H_{A_{1}}(D)} = \frac{0.083}{1.585} = 0.052\]</span></p><p><span class="math display">\[g_{R}(D,A_{2}) = \frac{0.324}{0.919} = 0.353\]</span></p><p><span class="math display">\[g_{R}(D,A_{3}) = \frac{0.420}{0.971} =  0.433\]</span></p><p><span class="math display">\[g_{R}(D,A_{4}) = \frac{0.363}{1.565} = 0.232\]</span></p><p>故选择 <span class="math inline">\(A_{3}\)</span> 是否有房作为最佳特征把数据集划分为两个部分，在两个数据集上，分别再计算特征 <span class="math inline">\(A_{1},A_{2},A_{4}\)</span> 的信息增益比。依次递归，最后得到决策树如下图</p><h2 id="section-10">5.2</h2><blockquote><p>已知如表 5.2 所示的训练数据，试用平方误差损失准则生成一个二叉回归树。训练数据如下 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10];</span><br><span class="line">y = [4.50; 4.75; 4.91; 5.34; 5.80; 7.05; 7.90; 8.23; 8.70; 9.00];</span><br></pre></td></tr></table></figure></p></blockquote><div><div class="fold_hider"><div class="close hider_title">5.2.py 点击展开隐藏内容</div></div><div class="fold"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">input_y = [<span class="number">4.5</span>, <span class="number">4.75</span>, <span class="number">4.91</span>, <span class="number">5.34</span>, <span class="number">5.80</span>, <span class="number">7.05</span>, <span class="number">7.90</span>, <span class="number">8.23</span>, <span class="number">8.7</span>, <span class="number">9.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_node</span><span class="params">(arr)</span>:</span></span><br><span class="line">    min_value = sys.float_info.max</span><br><span class="line">    min_index = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">        split_arr = np.split(arr, [i], axis=<span class="number">0</span>)</span><br><span class="line">        v = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> sa <span class="keyword">in</span> split_arr:</span><br><span class="line">            v += np.var(sa)*len(sa)</span><br><span class="line">        <span class="keyword">if</span> v &lt; min_value:</span><br><span class="line">            min_value = v</span><br><span class="line">            min_index = i</span><br><span class="line">    <span class="keyword">return</span> min_value, min_index</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_tree</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arr) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> len(arr) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        v, idx = split_node(arr)</span><br><span class="line">        <span class="keyword">return</span> &#123;arr[idx<span class="number">-1</span>]:[build_tree(arr[:idx]), build_tree(arr[idx:])]&#125;</span><br><span class="line"></span><br><span class="line">pprint.pprint(build_tree(np.array(input_y)))</span><br></pre></td></tr></table></figure></div></div><p>划分结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;5.7999999999999998: [&#123;4.9100000000000001: [&#123;4.5: [4.5,</span><br><span class="line">                                                   &#123;4.75: [4.75,</span><br><span class="line">                                                           4.9100000000000001]&#125;]&#125;,</span><br><span class="line">                                            &#123;5.3399999999999999: [5.3399999999999999,</span><br><span class="line">                                                                  5.7999999999999998]&#125;]&#125;,</span><br><span class="line">                      &#123;7.9000000000000004: [&#123;7.0499999999999998: [7.0499999999999998,</span><br><span class="line">                                                                  7.9000000000000004]&#125;,</span><br><span class="line">                                            &#123;8.2300000000000004: [8.2300000000000004,</span><br><span class="line">                                                                  &#123;8.6999999999999993: [8.6999999999999993,</span><br><span class="line">                                                                                        9.0]&#125;]&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure><h2 id="section-11">5.3</h2><blockquote><p>证明CART剪枝算法中，当α确定时，存在唯一的最小子树Tα使损失函数Cα(T)最小。</p></blockquote><p>反证法，假设最小子树不唯一，记为 <span class="math inline">\(T_{a}, T_{b}\)</span>，则他们对应的损失函数相等，且均取到最小值，记为 <span class="math inline">\(min(C_{\alpha} (T)) = C_{\alpha} (T_{a}) = C_{\alpha} (T_{b})\)</span></p><p>如果将 <span class="math inline">\(T_{a}, T_{b}\)</span> 不同的部分记为 <span class="math inline">\(T&#39;_{a}, T&#39;_{b}\)</span>，如果在 <span class="math inline">\(T_{b}\)</span> 中用 <span class="math inline">\(T&#39;_{a}\)</span> 代替，则由最小子树定义，<span class="math inline">\(T_{b}\)</span> 的损失函数进一步减小，与 <span class="math inline">\(T_{b}\)</span> 是最小子树矛盾.</p><h1 id="第六章-逻辑斯蒂回归与最大熵">第六章 逻辑斯蒂回归与最大熵</h1><h2 id="section-12">6.1</h2><blockquote><p>确认逻辑斯谛分布属于指数分布族</p></blockquote><p>指数分布族具有如下形式</p><p><span class="math display">\[f_{X}(x|\theta) = h(x)exp(\eta(\theta)T(x) - a(\theta))\]</span></p><p>logistic 分布的概率密度函数为</p><p><span class="math display">\[f(x) = \frac{e^{-(x-u/\gamma)}}{\gamma(1+e^{-(x-u)/\gamma})^{2}}\]</span></p><p>转化一下</p><p><span class="math display">\[f(x) = exp(-2 log(1+e^{-(x-u)/\gamma})-(x-u)/\gamma - 2log(\gamma))\]</span></p><p>该式不能转化为指数分布族的表示，故逻辑斯蒂回归不属于指数分布族</p><h2 id="section-13">6.2</h2><blockquote><p>写出逻辑斯谛回归模型学习的梯度下降算法</p></blockquote><p>逻辑斯蒂回归的对数似然函数为</p><p><span class="math display">\[L(w) = \sum_{i=1}^{N}[y_{i}(w*x_{i}) - log(1+exp(w*x_{i}))]\]</span></p><p>梯度下降的迭代是</p><p><span class="math display">\[w_{j} = w_{j} - \alpha \frac{\partial L(w) }{\partial w_{j}}\]</span></p><p><span class="math display">\[\frac{\partial L(w) }{\partial w_{j}} = \sum_{i=1}^{N}(y_{i} - \frac{exp(wx_{i})}{1+exp(wx_{i})})*x_{i}^{j} \]</span></p><h2 id="section-14">6.3</h2><h1 id="第八章-提升方法">第八章 提升方法</h1><h2 id="section-15">8.1</h2><blockquote><p>某公司招聘职员考查身体、业务能力、发展潜力这 3 项。身体分为合格1、不合格0两级，业务能力和发展潜力分为上1、中2、下3三级分类为合格1 、不合格-1两类。已知10个人的数据，如下表所示。假设弱分类器为决策树桩。.试用AdaBoost算法学习一个强分类器。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近着手做一个流量预测方面的东西，重新刷一遍蓝皮书巩固下基础知识。&lt;/p&gt;
&lt;h1 id=&quot;第一章-概论&quot;&gt;第一章 概论&lt;/h1&gt;
&lt;h2 id=&quot;section&quot;&gt;1.1&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;说明伯努利模型的极大似然估计以及贝叶斯估计中的统计学习方法三要素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;努利模型的极大似然估计&quot;&gt;1.1.1 努利模型的极大似然估计&lt;/h3&gt;
&lt;p&gt;设 &lt;span class=&quot;math inline&quot;&gt;\(X \sim b(1, p)\)&lt;/span&gt;, 则 &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; 的分布律为&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
P\{X=x\} = p^{x}(1-p)^{1-x},  \ \ \ \  x = 0, 1
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;假设 &lt;span class=&quot;math inline&quot;&gt;\(x_{1}, x_{2},\cdots , x_{n}\)&lt;/span&gt; 是对应于样本 &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; 的取值，则似然函数为&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
L(p) = \prod_{i = 1}^{n}p^{x_{i}}(1-p)^{1-x_{i}} = p^{\sum_{i=1}^{n}x_{i}}(1-p)^{n-\sum_{i=1}^{n}x_{i}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;取对数:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
\ln L(p) = (\sum_{i=1}^{n}x_{i})\ln p+ (n - \sum_{i=1}^{n}x_{i})\ln (1-p)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;对 p 求导&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
\frac{\mathrm{d} }{\mathrm{d} p} \ln L(p)  = \frac{\sum_{i=1}^{n}x_{i}}{p} - \frac{n - \sum_{i=1}^{n}x_{i}}{1-p} = 0
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;解得 p 的极大似然估计值为&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
\hat{p} =  \frac{\sum_{i=1}^{n}x_{i}}{n} 
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;故，当有 k 个 &lt;span class=&quot;math inline&quot;&gt;\(x_{i}\)&lt;/span&gt; 取值为 1 时， &lt;span class=&quot;math inline&quot;&gt;\(\hat{p} = \frac{k}{n}\)&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://simonxia.com/categories/programming/"/>
    
    
      <category term="统计学习方法" scheme="http://simonxia.com/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
      <category term="statistics" scheme="http://simonxia.com/tags/statistics/"/>
    
  </entry>
  
  <entry>
    <title>利用 Shapley Value 计算带宽成本</title>
    <link href="http://simonxia.com/%E5%88%A9%E7%94%A8%20Shapley%20value%20%E8%AE%A1%E7%AE%97%E5%B8%A6%E5%AE%BD%E6%88%90%E6%9C%AC/"/>
    <id>http://simonxia.com/利用 Shapley value 计算带宽成本/</id>
    <published>2017-02-10T12:18:45.000Z</published>
    <updated>2018-06-20T10:34:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Shapley_value" target="_blank" rel="noopener">沙普利值法(Shapley Value)</a> 是一种团队贡献度计算方法，经常被用于需要公平地分配合作收益的场景。其公式如下</p><p><span class="math display">\[\phi_{i}(v) = \sum_{S \subseteq N \setminus \{i\}} \frac{\left | S \right |!(|N|-|S|-1)!}{|N|!}(v(S \bigcup \{i\}) - v(S))\]</span></p><p>它的核心是计算每个成员在所有成员组合中的边际贡献的期望。边际贡献即为式中的:</p><p><span class="math display">\[\delta _{i}(S) = v(S \bigcup \{i\}) - v(S)\]</span></p><h1 id="在带宽成本中的应用">在带宽成本中的应用</h1><p>在实际的带宽用量计算中通常以一段时间的 95 峰值（95分位值，业内对带宽计算的事实标准）为准。当存在一批域名时，由于每个域名的流量分布不同，95峰不同，域名流量叠加后的 95 峰就不等于所有域名95峰的简单计算。举个例子，有三个域名，他们的带宽分布分别如下</p><p>domain1</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/利用Shapley-value计算带宽成本/domain1.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><a id="more"></a><p>domain2</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/利用Shapley-value计算带宽成本/domain2.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><p>domain3</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/利用Shapley-value计算带宽成本/domain3.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><p>三个域名叠加后</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/利用Shapley-value计算带宽成本/domain1-2-3.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><p>可见，三域名的带宽图叠加之后，带宽分布发生变化，95峰值也随之改变。 如果叠加之后的 95 峰记为 <span class="math inline">\(v95_{total}\)</span>，三个域名的 95 峰分别记为 <span class="math inline">\(v95_{1}\)</span>,<span class="math inline">\(v95_{2}\)</span>,<span class="math inline">\(v95_{3}\)</span>，怎么计算三者在总量中的比例呢？此时沙普利值法就发挥作用了。</p><p>带入实际数据，举个例子</p><table><thead><tr class="header"><th>组合</th><th>95 峰 (Mbps)</th></tr></thead><tbody><tr class="odd"><td>domain1</td><td>100</td></tr><tr class="even"><td>domain2</td><td>200</td></tr><tr class="odd"><td>domain3</td><td>300</td></tr><tr class="even"><td>domain1, domain2</td><td>250</td></tr><tr class="odd"><td>domain3, domain2</td><td>400</td></tr><tr class="even"><td>domain3, domain1</td><td>350</td></tr><tr class="odd"><td>domain3, domain2, domain1</td><td>500</td></tr></tbody></table><p>表格的前三列是每个域名单独的 95 峰值，接下来三列是他们两两组合后的 95 峰值，最后一列是三者相加的 95 峰值。</p><p>分别计算边际贡献</p><table><thead><tr class="header"><th>排列</th><th>domain1</th><th>domain2</th><th>domain3</th></tr></thead><tbody><tr class="odd"><td>1,2,3</td><td>S(1) = 100</td><td>S(1,2) - S(1) = 150</td><td>S(1,2,3) - S(1,2) = 250</td></tr><tr class="even"><td>1,3,2</td><td>S(1) = 100</td><td>S(1,2,3) - S(1,3) = 150</td><td>S(1,3) - S(1) = 250</td></tr><tr class="odd"><td>2,1,3</td><td>S(1,2) - S(2) = 50</td><td>S(2) = 200</td><td>S(1,2,3) - S(1,2) = 250</td></tr><tr class="even"><td>2,3,1</td><td>S(1,2,3) - S(3,2) = 100</td><td>S(2) = 200</td><td>S(3,2) - S(2) = 200</td></tr><tr class="odd"><td>3,1,2</td><td>S(3,1) - S(3) = 50</td><td>S(1,2,3) - S(3,1) = 150</td><td>S(3) = 300</td></tr><tr class="even"><td>3,2,1</td><td>S(1,2,3) - S(3,2) = 100</td><td>S(3,2) - S(3) = 100</td><td>S(3) = 300</td></tr></tbody></table><p>则三个域名对总带宽 95 峰的贡献分别是</p><table><thead><tr class="header"><th>域名</th><th>贡献</th></tr></thead><tbody><tr class="odd"><td>domain1</td><td>1/6 * (100+100+50+100+50+100) = 83.33</td></tr><tr class="even"><td>domain2</td><td>1/6 * (150+150+200+200+150+100) = 158.33</td></tr><tr class="odd"><td>domain3</td><td>1/6 * (250+250+250+200+300+300) = 258.33</td></tr></tbody></table><h1 id="针对带宽成本中的简化">针对带宽成本中的简化</h1><p>前面的例子中，域名数量为三，如果更多呢？显然边际贡献的计算量会急剧增加，与 N! 成正比。</p><p>从沙普利值的公式也可以证实该计算复杂度是 O(N)。我们的域名数量非常多达百万，这个复杂度显然是不可接受的。</p><p>由于域名带宽的特殊性， 对于不同域名的带宽叠加，他们的 95 峰值呈现如下关系:</p><p><span class="math inline">\(max(v95_{i} + v95_{j}) &lt;= v95_{total} &lt;= v95_{i} + v95_{j}\)</span></p><p>即两域名带宽叠加，叠加后的 95 峰值不会小于两者最大值，也不会大于两者之和。</p><p>考虑到这种贡献的单增性，我们对沙普利值法做简化，将 N! 替换为 2！可以理解为把整个带宽的贡献分成两部分，一部分是当前域名产生的，另一部分是除开当前域名其他域名产生的。</p><p>还是以上面的例子为例</p><table><thead><tr class="header"><th>排列</th><th>domain1</th><th>domain2</th><th>domain3</th></tr></thead><tbody><tr class="odd"><td>1,other</td><td>S(1) = 100</td><td>-</td><td>-</td></tr><tr class="even"><td>other,1</td><td>S(1,2,3) - S(2,3) = 100</td><td>-</td><td>-</td></tr><tr class="odd"><td>2,other</td><td>-</td><td>S(2) = 200</td><td>-</td></tr><tr class="even"><td>other,2</td><td>-</td><td>S(1,2,3) - S(1,3) = 150</td><td>-</td></tr><tr class="odd"><td>3,other</td><td>-</td><td>-</td><td>S(3) = 300</td></tr><tr class="even"><td>other,3</td><td>-</td><td>-</td><td>S(1,2,3) - S(1,2) = 250</td></tr></tbody></table><p>简化公式后，三个域名对 95 峰的贡献分别为</p><table><thead><tr class="header"><th>域名</th><th>贡献</th></tr></thead><tbody><tr class="odd"><td>domain1</td><td>1/2 * (100+100) = 100</td></tr><tr class="even"><td>domain2</td><td>1/2 * (150+200) = 175</td></tr><tr class="odd"><td>domain3</td><td>1/2 * (250+300) = 275</td></tr></tbody></table><p>由于简化后总和大于原三者 95 峰，统一归一化： domain1: 100/(100+175+275)<em>500 = 90.91 domain2: 175/(100+175+275)</em>500 = 159.09 domain2: 275/(100+175+275)*500 = 250</p><p>对比简化前后，误差出入在可接收范围内，但计算复杂度从 O(N!) 降低到了 O(N)，在我们场景 N 为百万量级时，优势非常明显</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Shapley_value&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;沙普利值法(Shapley Value)&lt;/a&gt; 是一种团队贡献度计算方法，经常被用于需要公平地分配合作收益的场景。其公式如下&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
\phi_{i}(v) = \sum_{S \subseteq N \setminus \{i\}} \frac{\left | S \right |!(|N|-|S|-1)!}{|N|!}(v(S \bigcup \{i\}) - v(S))
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;它的核心是计算每个成员在所有成员组合中的边际贡献的期望。边际贡献即为式中的:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
\delta _{i}(S) = v(S \bigcup \{i\}) - v(S)
\]&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;在带宽成本中的应用&quot;&gt;在带宽成本中的应用&lt;/h1&gt;
&lt;p&gt;在实际的带宽用量计算中通常以一段时间的 95 峰值（95分位值，业内对带宽计算的事实标准）为准。当存在一批域名时，由于每个域名的流量分布不同，95峰不同，域名流量叠加后的 95 峰就不等于所有域名95峰的简单计算。举个例子，有三个域名，他们的带宽分布分别如下&lt;/p&gt;
&lt;p&gt;domain1&lt;/p&gt;
&lt;img src=&quot;http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/利用Shapley-value计算带宽成本/domain1.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim&quot;&gt;
    
    </summary>
    
      <category term="programming" scheme="http://simonxia.com/categories/programming/"/>
    
    
      <category term="Shapley Value" scheme="http://simonxia.com/tags/Shapley-Value/"/>
    
      <category term="带宽成本" scheme="http://simonxia.com/tags/%E5%B8%A6%E5%AE%BD%E6%88%90%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Moving Kafka Replica Between Disk</title>
    <link href="http://simonxia.com/move-kafka-partitons-between-disks/"/>
    <id>http://simonxia.com/move-kafka-partitons-between-disks/</id>
    <published>2016-12-27T07:30:26.000Z</published>
    <updated>2018-04-22T08:20:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>As we know, one Kafka partition replica resides under one directory. When the replica size grows, the directory maybe reach the limit of disk. And Kafka can’t handle this automatically, when disk is full, IOException occurs.</p><a id="more"></a><h1 id="fundamentals">Fundamentals</h1><p>So we have to do this by hand. Before we start, let’s take a look at some fundamentals about kafka’s log partiton</p><p>There are four files under each kafka data directory(path config in <code>log.dirs</code>), in addition to the replica log data directory.</p><ul><li><code>cleaner-offset-checkpoint</code></li><li><p><code>recovery-point-offset-checkpoint</code></p><p>As its name suggests, this file is used when broker restart, initialize the internal state of <code>LogManager</code>. Each time broker flush log, current <code>LogEndOffset</code> will be written to the file.</p></li><li><p><code>replication-offset-checkpoint</code></p><p>This file records the high watermark of partitions. The high watermark is the offset of the last message that was successfully copied to all of the log’s replicas</p></li><li><p><code>meta.properties</code> holds the version and id of broker</p></li></ul><p>Difference between Log end offset(LEO) and High Watermark(HW) is shown below. More details can be found <a href="http://www.confluent.io/blog/hands-free-kafka-replication-a-lesson-in-operational-simplicity/" target="_blank" rel="noopener">here</a>.</p><p><img src="/img/move-kafka/mk-partition.png"></p><h1 id="steps">Steps</h1><p>Let’s take a look at one example</p><pre><code> ~$ du -hd 1 /disk12/kafka-logs/ 176G    /disk12/kafka-logs/midsource-fsrcproxy1-9 90G     /disk12/kafka-logs/dns-formated-log-48 270G    /disk12/kafka-logs/metrics-15 ...</code></pre><p>now we want to move partition <code>metrics-15</code> to another disk, for example <code>/disk7/kafka-logs</code></p><h2 id="step-0-stop-the-broker">Step 0: Stop the broker</h2><h2 id="step-1-migrating-meta-in-recovery-file">Step 1: Migrating meta in recovery file</h2><pre><code>~$ cat /disk12/kafka-logs/recovery-point-offset-checkpoint041...metrics 15 185980984...</code></pre><p>Main format of this file is <code>&lt;topic&gt; &lt;partition id&gt; &lt;LogEndOffset&gt;</code>, find our target partition, cut the line, and paste the line into <code>/disk7/kafka-logs/recovery-point-offset-checkpoint</code></p><p>The second line shows how many partition under this log data dir. After we move partition, it should be reduced by one, so we change it from <code>41</code> to <code>40</code>.</p><p>At the same time the second line number in <code>/disk7/kafka-logs/recovery-point-offset-checkpoint</code> should be added one</p><h2 id="step-2-migrating-meta-in-replica-offset-file">Step 2: Migrating meta in replica offset file</h2><p>Similar to step 1, except that the file is changed to <code>replication-offset-checkpoint</code></p><h2 id="step-3-move-partition-data">Step 3: Move partition data</h2><pre><code>mv /disk12/kafka-logs/metrics-15 /disk7/kafka-logs/metrics-15</code></pre><h2 id="step-4-restart-the-broker">Step 4: Restart the broker</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As we know, one Kafka partition replica resides under one directory. When the replica size grows, the directory maybe reach the limit of disk. And Kafka can’t handle this automatically, when disk is full, IOException occurs.&lt;/p&gt;
    
    </summary>
    
      <category term="infra" scheme="http://simonxia.com/categories/infra/"/>
    
    
      <category term="kafka" scheme="http://simonxia.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>记一次写磁盘的缓存优化</title>
    <link href="http://simonxia.com/%E4%B8%80%E6%AC%A1%E5%86%99%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <id>http://simonxia.com/一次写缓存优化的经历/</id>
    <published>2016-12-05T04:40:02.000Z</published>
    <updated>2018-05-26T23:47:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>半年来，一个我维护的系统一直在持续更新迭代，业务推手来自自建的CDN上量很快，短短半年初具规模，记录下历程总结回顾</p><h1 id="业务场景">业务场景</h1><p>有大量的域名访问日志从 kafka 收集过来，需要对其消费写入本地文件中，文件需按域名拆分，即一个域名一个文件。</p><p>问题规模 - kafka 输入在 60万 QPS （未来还会持续增加） - 每行访问日志大小约 200 - 800 Byte 不等</p><a id="more"></a><h1 id="v1.0">v1.0</h1><p>最开始域名数量比较少，在千级别，只有一些重点客户有此需求。所以我们维护了一堆呈打开状态文件的 fd，每消费出一条消息，就将其写到对应的文件的 fd 中。此方法简单粗暴，效果良好。</p><h1 id="v2.0">v2.0</h1><p>随着服务发展，域名数量开始增多。这种维护打开 fd 的方式很快会到达系统 fd 打开的上限。一种比较平滑的解决方法是对域名做哈希运算，将哈希相同的域名写到一个文件里，再定时对文件按域名切分。这会引入额外的工作步骤，直观的解决办法是增加缓存，将消费日志数据与落地磁盘两个过程解耦: <em>将消费出的日志在内存中按域名聚合，再定期刷写到磁盘中</em></p><p>具体地说，在内存中维护一个哈希表，以域名为 key， 日志内容为 value 用 go 定义结构即为 map[string][]byte ，相同域名的日志聚合到一个 []byte 字节数组中。然后每隔一段时间，把这个哈希表写到磁盘中，每个key对应一个域名的文件，可以以key为粒度并发进行。</p><p>整个系统结构如下</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/一次写缓存优化的经历/log_spliter.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><p>针对某个 kafka topic，对每个 partition 启动一个 partition consumer 进程，每个进程中维护一个小哈希表 snap，定时将所有 snap 发送到管道 snapChannel，在管道另一端，一个进程合并一批 snap 为一个大哈希表 mergedSnap，再异步将 mergedSnap 写到磁盘上，每个key一个文件。</p><p>整个程序内存占用为： (parition数量+snapChannel大小)*snap大小+mergedSnap大小</p><p>通过 partition consumer 步骤的消费时长能控制 snap 大小，通过控制 snapChannel 大小可以控制缓存的 snap 数量，如果磁盘写入性能收到影响，通过 snapChannel 可以反压消费端（步骤 push 写入snapChannel为同步）。因此，整个系统内存占用可控.</p><h1 id="v3.0">v3.0</h1><p>随着业务继续增加，v2.0的缺点开始暴露出来。 业务增长直接影响体现在 QPS 增加和域名数量增加（约 20 万）</p><p>因为每个域名的日志量不同，并且倾斜明显，基本遵循二八原则即 20%的域名产生了80%的日志，这就使得哈希表中的value分布倾斜。直接后果就是在刷写磁盘时，几个大域名的文件成了长尾。 同时，域名数量增加也带来写文件数量的增加，一次刷写磁盘周期显著变长。</p><p>针对哈希表倾斜，可以将刷写磁盘的步骤拆解为更小的粒度。即把以前一次刷写一张表，改为以key为单位刷写磁盘。同时，刷盘粒度减小后，一个大周期的写盘被分散到若干小周期中。 一些可选策略如下 1. 对value 大的key提高刷盘频率 2. 对哈希表中 value 大小 top 一定百分比的key统一刷盘 3. 对每个 key 累积到一定大小单独刷盘 4. 定时对一些 value 小的 key 统一刷盘 5. 表中的 key 距离上次被刷新时间超过一定阈值</p><p>实际实现时采取<em>定时检查，选择刷盘</em>的策略，为 v2.0 中的 mergedSnap 增加更多具体元信息，周期性地对其检查。</p><p>设置两个阈值：</p><ol type="1"><li>每个key的大小阈值 maxKeySize</li><li>强制刷新间隔 forceFlushDuration</li></ol><p>策略：</p><ol type="1"><li>对 value 大于 maxKeySize 的 key 触发刷盘</li><li>对 value 小于 maxKeySize 的 key，如果距离上次刷盘时间间隔大于 forceFlushDuration, 触发刷盘</li></ol><p>为了避免整个哈希表内存占用过高，当整个哈希表大小到一定阈值时，触发刷盘。</p><p>其他优化</p><ul><li>利用zfs将多个磁盘合并，减少磁盘空间使用不均的同时提高磁盘io利用率</li><li>在 merge 时利用 gzip 压缩节省空间，直接以 gzip 的方式落到磁盘上</li></ul><h1 id="总结">总结</h1><p>总的说来，针对写磁盘的缓存，解决此问题的核心思路围绕以下几点展开</p><ol type="1"><li>把大量文件的随机写转化为少量文件的顺序写</li><li>把少量频繁的写入合并为批量单次的写入</li><li>对低频更新的数据，设置超时或大小阈值触发写入</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;半年来，一个我维护的系统一直在持续更新迭代，业务推手来自自建的CDN上量很快，短短半年初具规模，记录下历程总结回顾&lt;/p&gt;
&lt;h1 id=&quot;业务场景&quot;&gt;业务场景&lt;/h1&gt;
&lt;p&gt;有大量的域名访问日志从 kafka 收集过来，需要对其消费写入本地文件中，文件需按域名拆分，即一个域名一个文件。&lt;/p&gt;
&lt;p&gt;问题规模 - kafka 输入在 60万 QPS （未来还会持续增加） - 每行访问日志大小约 200 - 800 Byte 不等&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://simonxia.com/categories/programming/"/>
    
    
      <category term="cache" scheme="http://simonxia.com/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>Be Careful with Embedded Error in Golang</title>
    <link href="http://simonxia.com/be-careful-with-golang-embedded-error/"/>
    <id>http://simonxia.com/be-careful-with-golang-embedded-error/</id>
    <published>2016-10-09T04:40:02.000Z</published>
    <updated>2018-04-18T13:50:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="start-with-a-example">Start with a example</h1><h2 id="example1">example1</h2><div><div class="fold_hider"><div class="close hider_title">example1.go (click to expand)</div></div><div class="fold"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ErrorInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Code <span class="keyword">int</span>    <span class="string">`json:"code"`</span></span><br><span class="line">Err  <span class="keyword">string</span> <span class="string">`json:"error"`</span></span><br><span class="line">Desc <span class="keyword">string</span> <span class="string">`json:"desc"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ErrorInfo)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> e.Err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ErrorPointerEmbedded <span class="keyword">struct</span> &#123;</span><br><span class="line">*ErrorInfo</span><br><span class="line">Data <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ErrorStructEmbedded <span class="keyword">struct</span> &#123;</span><br><span class="line">ErrorInfo</span><br><span class="line">Data <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">pe ErrorPointerEmbedded</span><br><span class="line">se ErrorStructEmbedded</span><br><span class="line">ei ErrorInfo = ErrorInfo&#123;<span class="number">200</span>, <span class="string">""</span>, <span class="string">"no error here"</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pe.ErrorInfo = &amp;ei</span><br><span class="line">pe.Data = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">se.ErrorInfo = ei</span><br><span class="line">se.Data = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"Printf ErrorPointerEmbedded with %%+v: %+v\n"</span>, pe)</span><br><span class="line">fmt.Printf(<span class="string">"Printf ErrorPointerEmbedded with %%#v: %#v\n"</span>, pe)</span><br><span class="line">fmt.Printf(<span class="string">"Printf ErrorStructEmbedded with %%+v: %+v\n"</span>, se)</span><br><span class="line">fmt.Printf(<span class="string">"Printf ErrorStructEmbedded with %%#v: %#v\n"</span>, se)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>Here is the output</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/be-careful-with-golang-embedded-error/example1-output.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><a id="more"></a><p>We got nothing printed at the first line. This is because type <code>ErrorPointerEmbedded</code> inherit <code>*ErrorInfo</code> and <code>*ErrorInfo</code> has a method <code>Error() string</code>, the method is called by <code>fmt.Printf</code> with <code>%v</code> or <code>%+v</code>. We can learn this rule from <a href="https://golang.org/pkg/fmt/" target="_blank" rel="noopener">package fmt</a></p><blockquote><ol start="4" type="1"><li>If an operand implements the error interface, the Error method will be invoked to convert the object to a string, which will then be formatted as required by the verb (if any).</li></ol></blockquote><p>How about using <code>func (e ErrorInfo) Error() string</code> instead of <code>func (e *ErrorInfo) Error() string</code> ?</p><h2 id="example2">example2</h2><div><div class="fold_hider"><div class="close hider_title">example2.go (click to expand)</div></div><div class="fold"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ErrorInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Code <span class="keyword">int</span>    <span class="string">`json:"code"`</span></span><br><span class="line">Err  <span class="keyword">string</span> <span class="string">`json:"error"`</span></span><br><span class="line">Desc <span class="keyword">string</span> <span class="string">`json:"desc"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ErrorInfo)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> e.Err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ErrorPointerEmbedded <span class="keyword">struct</span> &#123;</span><br><span class="line">*ErrorInfo</span><br><span class="line">Data <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ErrorStructEmbedded <span class="keyword">struct</span> &#123;</span><br><span class="line">ErrorInfo</span><br><span class="line">Data <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">pe ErrorPointerEmbedded</span><br><span class="line">se ErrorStructEmbedded</span><br><span class="line">ei ErrorInfo = ErrorInfo&#123;<span class="number">200</span>, <span class="string">""</span>, <span class="string">"no error here"</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pe.ErrorInfo = &amp;ei</span><br><span class="line">pe.Data = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">se.ErrorInfo = ei</span><br><span class="line">se.Data = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"Printf ErrorPointerEmbedded with %%+v: %+v\n"</span>, pe)</span><br><span class="line">fmt.Printf(<span class="string">"Printf ErrorPointerEmbedded with %%#v: %#v\n"</span>, pe)</span><br><span class="line">fmt.Printf(<span class="string">"Printf ErrorStructEmbedded with %%+v: %+v\n"</span>, se)</span><br><span class="line">fmt.Printf(<span class="string">"Printf ErrorStructEmbedded with %%#v: %#v\n"</span>, se)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>Then we get</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/be-careful-with-golang-embedded-error/example2-output.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><p>This is straightforward, it’s a issue about method set in Golang. From the <a href="https://golang.org/ref/spec#Method_sets" target="_blank" rel="noopener">Go Spec</a></p><blockquote><p>The method set of any other named type T consists of all methods with receiver type T. The method set of the corresponding pointer type <em>T is the set of all methods with receiver </em>T or T (that is, it also contains the method set of T).</p></blockquote><p>This means value methods can be invoked on pointers and values, but pointer methods can only be invoked on pointers. And in <code>example2.go</code> method <code>Error() string</code> is called at the first and third line of output.</p><h1 id="value-receiver-vs.pointer-receiver-in-error">Value receiver vs. Pointer receiver in Error?</h1><p>As <a href="https://golang.org/doc/faq#methods_on_values_or_pointers" target="_blank" rel="noopener">Golang FAQ</a> stats</p><blockquote><p>For types such as basic types, slices, and small structs, a value receiver is very cheap so unless the semantics of the method requires a pointer, a value receiver is efficient and clear.</p></blockquote><p>It seems small error struct with value receiver is ok.</p><p>And <a href="https://github.com/golang/go/wiki/CodeReviewComments#receiver-type" target="_blank" rel="noopener">Code Review comment</a> gives some useful guidelines</p><blockquote><ul><li>If the receiver is a map, func or chan, don’t use a pointer to them. If the receiver is a slice and the method doesn’t reslice or reallocate the slice, don’t use a pointer to it.</li><li>If the method needs to mutate the receiver, the receiver must be a pointer.</li><li>If the receiver is a struct that contains a sync.Mutex or similar synchronizing field, the receiver must be a pointer to avoid copying.</li><li>If the receiver is a large struct or array, a pointer receiver is more efficient. How large is large? Assume it’s equivalent to passing all its elements as arguments to the method. If that feels too large, it’s also too large for the receiver.</li><li>Can function or methods, either concurrently or when called from this method, be mutating the receiver? A value type creates a copy of the receiver when the method is invoked, so outside updates will not be applied to this receiver. If changes must be visible in the original receiver, the receiver must be a pointer.</li><li>If the receiver is a struct, array or slice and any of its elements is a pointer to something that might be mutating, prefer a pointer receiver, as it will make the intention more clear to the reader.</li><li>If the receiver is a small array or struct that is naturally a value type (for instance, something like the time.Time type), with no mutable fields and no pointers, or is just a simple basic type such as int or string, a value receiver makes sense. A value receiver can reduce the amount of garbage that can be generated; if a value is passed to a value method, an on-stack copy can be used instead of allocating on the heap. (The compiler tries to be smart about avoiding this allocation, but it can’t always succeed.) Don’t choose a value receiver type for this reason without profiling first.</li><li>Finally, when in doubt, use a pointer receiver.</li></ul></blockquote><p>Diving into go standard lib, some examples in package net:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> OpError <span class="keyword">struct</span> &#123;</span><br><span class="line">        Op <span class="keyword">string</span></span><br><span class="line">        Net <span class="keyword">string</span></span><br><span class="line">        Source Addr</span><br><span class="line">        Addr Addr</span><br><span class="line">        Err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *OpError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">DNSError</span> <span class="title">struct</span></span> &#123;</span><br><span class="line">        Err         <span class="keyword">string</span> <span class="comment">// description of the error</span></span><br><span class="line">        Name        <span class="keyword">string</span> <span class="comment">// name looked for</span></span><br><span class="line">        Server      <span class="keyword">string</span> <span class="comment">// server used</span></span><br><span class="line">        IsTimeout   <span class="keyword">bool</span>   <span class="comment">// if true, timed out; not all timeouts set this</span></span><br><span class="line">        IsTemporary <span class="keyword">bool</span>   <span class="comment">// if true, error is temporary; not all errors set this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *DNSError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">UnknownNetworkError</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(e UnknownNetworkError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure><p>It seems std lib prefer to use point receiver on struct error, and use value receiver on small type such as <code>UnknownNetworkError</code>.</p><h1 id="embedded-by-pointer-by-value-or-by-interface">Embedded by pointer, by value, or by interface ?</h1><p>Another idiomatic style is embedded <code>error</code> interface, for example:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ErrorInterfaceEmbedded <span class="keyword">struct</span> &#123;</span><br><span class="line">error</span><br><span class="line">Data <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This style is widly used in std lib, such as <code>OpError</code> in previous example.</p><p>Which of these three methods is better? There is no conclusive. <a href="http://www.hydrogen18.com/blog/golang-embedding.html" target="_blank" rel="noopener">Embedding in Go</a> may give some suggestions</p><h1 id="conclusion">Conclusion</h1><ol type="1"><li><p>It is a good practice to print a error embedded struct always with <code>%#v</code> instead of <code>%+v</code> or <code>%v</code> if more detail fields in struct need to be shown.</p></li><li>Do as most standard lib do:<ul><li>Using point receiver on struct error</li><li>Using value receiver on small type error</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;start-with-a-example&quot;&gt;Start with a example&lt;/h1&gt;
&lt;h2 id=&quot;example1&quot;&gt;example1&lt;/h2&gt;
&lt;div&gt;&lt;div class=&quot;fold_hider&quot;&gt;&lt;div class=&quot;close hider_title&quot;&gt;example1.go (click to expand)&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;fold&quot;&gt;
&lt;!--�2--&gt;

&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here is the output&lt;/p&gt;
&lt;img src=&quot;http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/be-careful-with-golang-embedded-error/example1-output.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim&quot;&gt;
    
    </summary>
    
      <category term="programming" scheme="http://simonxia.com/categories/programming/"/>
    
    
      <category term="golang" scheme="http://simonxia.com/tags/golang/"/>
    
      <category term="exception" scheme="http://simonxia.com/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>衰减平均与衰减标准差</title>
    <link href="http://simonxia.com/%E8%A1%B0%E5%87%8F%E5%B9%B3%E5%9D%87%E4%B8%8E%E8%A1%B0%E5%87%8F%E6%A0%87%E5%87%86%E5%B7%AE/"/>
    <id>http://simonxia.com/衰减平均与衰减标准差/</id>
    <published>2016-08-14T12:20:04.000Z</published>
    <updated>2018-05-26T23:51:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>衰减平均（Decaying Average）是一种简单的数学方法，用来计算一个数列的平均，核心是给近期的数据更高的权重，即强调近期数据对结果的影响。 衰减平均计算公式如下：</p><p><span class="math display">\[ \begin{cases}davg_{n} = v_{n} &amp; \text{ if } n=1 \\ davg_{n} = (1 - \alpha ) * v_{n} + \alpha * davg_{n-1} &amp; \text{ if } n &gt; 1 \end{cases} \]</span></p><p>式中 <span class="math inline">\(\alpha\)</span> 为历史数据权值，<span class="math inline">\(1-\alpha\)</span> 为最近一次数据权值。即 <span class="math inline">\(\alpha\)</span> 越小，最近一次的数据对结果影响越大。 不难看出，其实传统的平均就是 <span class="math inline">\(\alpha\)</span> 取值为 <span class="math inline">\((n-1)/n\)</span> 的情况</p><p><a id="more"></a></p><p>同理，衰减方差的定义如下:</p><p><span class="math display">\[ \begin{cases}dvar_{n} = 0 &amp; \text{ if } n=1 \\ dvar_{n} = (1 - \alpha ) * (v_{n} - davg_{n})^{2} + \alpha * dvar_{n-1} &amp; \text{ if } n &gt; 1 \end{cases} \]</span></p><p>我们用一组数据来演示下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">l = np.random.rand(<span class="number">20</span>)</span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="keyword">for</span> alpha <span class="keyword">in</span> np.arange(<span class="number">0.1</span>, <span class="number">1</span>, <span class="number">0.1</span>):</span><br><span class="line">    plt.plot([reduce(<span class="keyword">lambda</span> x, y: x*alpha+y*(<span class="number">1</span>-alpha), l[:i]) <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>, len(l)+<span class="number">1</span>)], label=<span class="string">"alpha "</span>+str(alpha))</span><br><span class="line"></span><br><span class="line">plt.plot([l[:i].mean() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(l)+<span class="number">1</span>) ], label=<span class="string">"avg"</span>, color=<span class="string">'red'</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.bar(range(len(l)),l)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>依次取 <span class="math inline">\(\alpha\)</span> 为 <code>0.1, 0.2 ... 0.9</code> 加上平均值一共 10 组数据，和原数据的直方图一起绘图如下</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/davg/davg.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><p>红色加粗的线为平均值，可见相对于衰减平均值来说，平均值更稳定。其余彩色线（衰减平均）都随着当前值波动，并且 <span class="math inline">\(\alpha\)</span> 取值越小波动越剧烈。</p><p>引用 <a href="http://www.narihiro.info/g1gc-impl-book/scheduling.html" target="_blank" rel="noopener">徹底解剖「G1GC」実装編 - 予測とスケジューリング</a> 中的一张图，该图更加直观地说明了数列中每个值对衰减平均的影响。</p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/davg/weight.png"><h1 id="应用">应用</h1><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/g1_gc.html" target="_blank" rel="noopener">G1 垃圾收集器</a> 的停顿预测模型（pause prediction model）是基于衰减平均和衰减标准差建立的。</p><p>java-1.8/hotspot/src/share/vm/utilities/numberSeq.cpp 36L-48L</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> AbsSeq::add(<span class="keyword">double</span> val) &#123;</span><br><span class="line">  <span class="keyword">if</span> (_num == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// if the sequence is empty, the davg is the same as the value</span></span><br><span class="line">    _davg = val;</span><br><span class="line">    <span class="comment">// and the variance is 0</span></span><br><span class="line">    _dvariance = <span class="number">0.0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// otherwise, calculate both</span></span><br><span class="line">    _davg = (<span class="number">1.0</span> - _alpha) * val + _alpha * _davg;</span><br><span class="line">    <span class="keyword">double</span> diff = val - _davg;</span><br><span class="line">    _dvariance = (<span class="number">1.0</span> - _alpha) * diff * diff + _alpha * _dvariance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_davg</code> 为衰减均值， <code>_dvariance</code> 为衰减方差</p><p>其中 <code>_alpha</code> 的默认值定义如下 java-1.8/hotspot/src/share/vm/utilities/numberSeq.hpp L43 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_ALPHA_VALUE 0.7</span></span><br></pre></td></tr></table></figure></p><p>G1 的预测逻辑就基于衰减平均值和衰减标准差，每次预测对历史序列执行以下函数即可</p><p>java-1.8/hotspot/src/share/vm/gc_implementation/g1/g1CollectorPolicy.hpp <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_new_prediction</span><span class="params">(TruncatedSeq* seq)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> MAX2(seq-&gt;davg() + sigma() * seq-&gt;dsd(),</span><br><span class="line">              seq-&gt;davg() * confidence_factor(seq-&gt;num()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中, <code>MAX2</code>函数取两者最大。<code>davg()</code> 即序列的衰减平均值，<code>dsd()</code> 为衰减标准差。 <code>sigma()</code> 来自环境变量 <code>G1ConfidencePercent</code> 的配置，相关代码如下</p><p>java-1.8/hotspot/src/share/vm/gc_implementation/g1/g1CollectorPolicy.hpp L265 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> _sigma;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sigma</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _sigma; &#125;</span><br></pre></td></tr></table></figure></p><p>java-1.8/hotspot/src/share/vm/gc_implementation/g1/g1CollectorPolicy.cpp L286 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uintx confidence_perc = G1ConfidencePercent;</span><br><span class="line"><span class="comment">// Put an artificial ceiling on this so that it's not set to a silly value.</span></span><br><span class="line"><span class="keyword">if</span> (confidence_perc &gt; <span class="number">100</span>) &#123;</span><br><span class="line">  confidence_perc = <span class="number">100</span>;</span><br><span class="line">  warning(<span class="string">"G1ConfidencePercent is set to a value that is too large, "</span></span><br><span class="line">          <span class="string">"it's been updated to %u"</span>, confidence_perc);</span><br><span class="line">&#125;</span><br><span class="line">_sigma = (<span class="keyword">double</span>) confidence_perc / <span class="number">100.0</span>;</span><br></pre></td></tr></table></figure></p><p><code>confidence_factor</code> 当数据不足时（小于5个）取一个大于1的值，并且数据越少值越大。当数据多余 5 个取值为1。一定程度上给数据不足起到补偿作用。</p><p>java-1.8/hotspot/src/share/vm/gc_implementation/g1/g1CollectorPolicy.hpp <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A function that prevents us putting too much stock in small sample</span></span><br><span class="line"><span class="comment">// sets.  Returns a number between 2.0 and 1.0, depending on the number</span></span><br><span class="line"><span class="comment">// of samples.  5 or more samples yields one; fewer scales linearly from</span></span><br><span class="line"><span class="comment">// 2.0 at 1 sample to 1.0 at 5.</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">confidence_factor</span><span class="params">(<span class="keyword">int</span> samples)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (samples &gt; <span class="number">4</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span>  <span class="number">1.0</span> + sigma() * ((<span class="keyword">double</span>)(<span class="number">5</span> - samples))/<span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其他方面，因为标准平均对最近数据敏感的特性，也在教育界被用在对学生技能掌握的评估上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;衰减平均（Decaying Average）是一种简单的数学方法，用来计算一个数列的平均，核心是给近期的数据更高的权重，即强调近期数据对结果的影响。 衰减平均计算公式如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \begin{cases}
davg_{n} = v_{n} &amp;amp; \text{ if } n=1 \\ 
davg_{n} = (1 - \alpha ) * v_{n} + \alpha * davg_{n-1} &amp;amp; \text{ if } n &amp;gt; 1 
\end{cases} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;式中 &lt;span class=&quot;math inline&quot;&gt;\(\alpha\)&lt;/span&gt; 为历史数据权值，&lt;span class=&quot;math inline&quot;&gt;\(1-\alpha\)&lt;/span&gt; 为最近一次数据权值。即 &lt;span class=&quot;math inline&quot;&gt;\(\alpha\)&lt;/span&gt; 越小，最近一次的数据对结果影响越大。 不难看出，其实传统的平均就是 &lt;span class=&quot;math inline&quot;&gt;\(\alpha\)&lt;/span&gt; 取值为 &lt;span class=&quot;math inline&quot;&gt;\((n-1)/n\)&lt;/span&gt; 的情况&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://simonxia.com/categories/programming/"/>
    
    
      <category term="衰减平均" scheme="http://simonxia.com/tags/%E8%A1%B0%E5%87%8F%E5%B9%B3%E5%9D%87/"/>
    
      <category term="G1" scheme="http://simonxia.com/tags/G1/"/>
    
  </entry>
  
  <entry>
    <title>这天，毕业</title>
    <link href="http://simonxia.com/%E8%BF%99%E5%A4%A9%EF%BC%8C%E6%AF%95%E4%B8%9A/"/>
    <id>http://simonxia.com/这天，毕业/</id>
    <published>2016-06-23T14:30:26.000Z</published>
    <updated>2018-07-03T23:50:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>在三年前经历过一次毕业之后，这一次的多巴胺明显剂量不足，毕竟在一所学校待了七年之后，我和身边所有人一样，心痒难耐，压抑不住冲出校门建设社会主义的热情。</p><p>然而真到这一刻还是不舍，穿过银杏大道，西门桥，西二门，又是一个栀子花开的初夏，七年回忆如在昨日。三年前一群好友在这里哭得稀里哗啦，今天离别形单影只，但从容平静。</p><p>等车的时候心情翻涌，最后回望一眼校门，和学生时代的自己挥别。</p><a id="more"></a><img src="http://7s1t7r.com1.z0.glb.clouddn.com/images/posts/毕业/graduate.png?imageMogr2/auto-orient/blur/1x0/quality/75|watermark/2/text/c2ltb254aWEuY29t/font/bWljcm9zb2Z0IHlhaGVp/fontsize/280/fill/IzAwMDAwMA==/dissolve/52/gravity/SouthEast/dx/10/dy/10|imageslim"><p>文酸劲忽起，忍不住憋了两句诗，没想好上阙 = =</p><p>「他时重登凌云梯，相拥携手续前狂。」</p><p>舍不得自由包容的校园，舍不得书生意气的好友，舍不得年少，舍不得轻狂。</p><p>希望以后的每一天不失今天的朝气和锐气，青春不死，热血不凉！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在三年前经历过一次毕业之后，这一次的多巴胺明显剂量不足，毕竟在一所学校待了七年之后，我和身边所有人一样，心痒难耐，压抑不住冲出校门建设社会主义的热情。&lt;/p&gt;
&lt;p&gt;然而真到这一刻还是不舍，穿过银杏大道，西门桥，西二门，又是一个栀子花开的初夏，七年回忆如在昨日。三年前一群好友在这里哭得稀里哗啦，今天离别形单影只，但从容平静。&lt;/p&gt;
&lt;p&gt;等车的时候心情翻涌，最后回望一眼校门，和学生时代的自己挥别。&lt;/p&gt;
    
    </summary>
    
      <category term="扯" scheme="http://simonxia.com/categories/%E6%89%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>浅尝图像搜索</title>
    <link href="http://simonxia.com/%E6%B5%85%E5%B0%9D%E5%9B%BE%E5%83%8F%E6%90%9C%E7%B4%A2/"/>
    <id>http://simonxia.com/浅尝图像搜索/</id>
    <published>2016-01-28T06:30:00.000Z</published>
    <updated>2018-02-02T17:31:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近和几个同学做了一个<a href="http://pkbigdata.com/c/00000000057" target="_blank" rel="noopener">比赛</a>，图片搜索，从15万张衣服和15万张鞋的图片中找出与目标图片最匹配的图。</p><p>整个过程还是挺有意思，以前没接触过图像处理方面的东西，在逐渐地深入之后才发现其博大精深。今天稍作整理，把所做工作小结在此。</p><h1 id="概述">概述</h1><p>完成这个过程大致有如下几步， 首先建立搜索引擎：</p><ul><li>提取每张图片特征</li><li>根据特征为所有图片建立索引</li></ul><p>针对目标图片的搜索则以上述过程为基础，继续：</p><ul><li>提取目标图片特征</li><li>计算目标图片与所有图片的相似度</li><li>将相似度倒排，取需要的前N张</li></ul><p><a id="more"></a></p><h1 id="特征提取">特征提取</h1><p>图像特征包含的内容太多，颜色，纹理，形状，内容等等无一不可作为其特征描述。仅图像特征描述一个方向，就有无数的科研工作者倾尽心血，诞生了不少经典的算法，比如大名鼎鼎的SIFT。</p><h1 id="颜色特征">颜色特征</h1><h2 id="色彩模型">色彩模型</h2><p>对于图像最直观的颜色特征，其抽象描述的数学模型——<a href="http://zh.wikipedia.org/wiki/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%96%93" target="_blank" rel="noopener">颜色空间</a>也分为好几大类</p><h3 id="rgb颜色模型"><a href="http://zh.wikipedia.org/wiki/%E4%B8%89%E5%8E%9F%E8%89%B2%E5%85%89%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">RGB颜色模型</a></h3><p>即通过红绿蓝三色混合描述各种颜色，它是最为常见的一种颜色描述，从电子显像管时代就被广泛应用。每个色彩可被表示为一个从[0,0,0]到[255,255,255]的三维向量。</p><p>但它的缺点很明显，因为RGB颜色空间内的欧氏距离与人类对颜色感知距离不成线性关系，也就是说它不是一个均匀视觉的颜色空间，颜色空间上的距离，并不代表人眼视觉上的颜色相似性。</p><p>另一方面，R、G、B三个方向的分量并不是相互独立的，当改变一个颜色时，三个通道上的颜色全部需要修改，无法单独处理某个分量内容</p><h3 id="hsv颜色模型"><a href="http://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4" target="_blank" rel="noopener">HSV颜色模型</a></h3><p>HSV分别表示：</p><ul><li><a href="http://zh.wikipedia.org/wiki/%E8%89%B2%E7%9B%B8" target="_blank" rel="noopener">色相（Hue）</a>：通俗地说就是颜色的种类，与光的波长有关。</li><li><a href="http://zh.wikipedia.org/wiki/%E8%89%B2%E5%BA%A6_%28%E8%89%B2%E5%BD%A9%E5%AD%A6%29" target="_blank" rel="noopener">饱和度（Saturation）</a>：主要指色彩纯度，与光线强弱和在不同波长的强度分布有关。</li><li>明度（Value）对应白光的参入量。</li></ul><p>相比RGB对颜色的描述，HSV颜色模型更接近人的视觉特征。</p><p><a href="http://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4#.E4.BB.8ERGB.E5.88.B0HSL.E6.88.96HSV.E7.9A.84.E8.BD.AC.E6.8D.A2" target="_blank" rel="noopener">RGB到HSV转换</a></p><p><span class="math display">\[h =\left\{\begin{matrix} 0^{\circ}  &amp; if\ max = min\\60^{\circ}\times (\frac{g-b}{max-min})+0^{\circ} &amp; if\ max = r\ and\ g\geq b\\60^{\circ}\times (\frac{g-b}{max-min})+360^{\circ} &amp;if\ max = r \ and \ g &lt; b\\60^{\circ}\times (\frac{b-r}{max-min})+120^{\circ} &amp;if\ max = g\\60^{\circ}\times (\frac{r-g}{max-min})+240^{\circ} &amp;if\ max = b \\\end{matrix}\right.\\ \]</span></p><p><span class="math display">\[ s = \left\{\begin{matrix}0 &amp;if\ max = 0\\ \frac{max - min}{max + min}&amp; otherwise\end{matrix}\right.\\ \]</span></p><p><span class="math display">\[v = max\]</span></p><h3 id="颜色矩"><a href="http://en.wikipedia.org/wiki/Wikipedia:Color_moments" target="_blank" rel="noopener">颜色矩</a></h3><p>颜色空间向量仅仅描述了颜色的分布，并没有包含分布的详细信息，如方差，均值等。 颜色矩通过低三阶矩很好地描述了这些特性，简单概括如下，更详细的信息见<a href="http://homepages.inf.ed.ac.uk/rbf/CVonline/LOCAL_COPIES/AV0405/KEEN/av_as2_nkeen.pdf" target="_blank" rel="noopener">论文：Color Moments</a></p><ul><li>一阶矩描述平均颜色</li></ul><div><span class="math display">\[\mu _{c} = \frac{1}{MN}\sum_{i = 1}^{M}\sum_{j = 1}^{N}p_{ij}^{c} \]</span></div><ul><li>二阶矩描述标准偏差</li></ul><div><span class="math display">\[\sigma  _{c} = [\frac{1}{MN}\sum_{i = 1}^{M}\sum_{j = 1}^{N}(p_{ij}^{c} - \mu _{c})^{2}]^{\frac{1}{2}}\]</span></div><ul><li>三阶矩描述颜色倾斜度</li></ul><div><span class="math display">\[\theta _{c}  = [\frac{1}{MN}\sum_{i = 1}^{M}\sum_{j = 1}^{N}(p_{ij}^{c} - \mu _{c})^{3}]^{\frac{1}{3}}\]</span></div><p>其中MN分别表示M行N列个像素点，c表示地c个颜色分量。 对于一个RGB三通道的图像，可通过颜色矩得到一个9维的特征向量</p><h2 id="色彩量化">色彩量化</h2><h3 id="rgb量化">RGB量化</h3><p>直接对颜色直方图分段，类似<a href="http://www.ruanyifeng.com/blog/2013/03/similar_image_search_part_ii.html" target="_blank" rel="noopener">峰哥的方法</a>。对每个颜色通道分为4个区间，通过对4x4x4个区间像素点数量的统计，最后得到一幅图的64维的特征向量。</p><p>一种更好的方法是把每个像素点的三维向量规约到一维上来，通常就是将RGB转化为对应的灰度，常用方法有三种：</p><ul><li><a href="https://en.wikipedia.org/wiki/Relative_luminance" target="_blank" rel="noopener">Relative luminance</a>：<code>0.2126*R + 0.7152*G + 0.0722*B</code></li><li><a href="http://www.w3.org/TR/AERT#color-contrast" target="_blank" rel="noopener">Luminance (perceived option 1)</a> ：<code>(0.299*R + 0.587*G + 0.114*B)</code></li><li><a href="http://alienryderflex.com/hsp.html" target="_blank" rel="noopener">Luminance (perceived option 2, slower to calculate)</a>：<code>sqrt( 0.299*R^2 + 0.587*G^2 + 0.114*B^2 )</code></li></ul><p>以第二种方法<code>Luminance (perceived option 1)</code>为例，每个像素点经过计算后会得到一个<code>[0,255]</code>的值，所以整幅图，我们就得到一个255维的向量，其中每个分量即为该分量上像素点的数量。</p><h3 id="hsv量化">HSV量化</h3><p>采用非均匀量化，常见的有两种量化等级：16X4X4和8X3X3，分别是指每个分量的划分区间数。 我们采用的8X3X3的方式，规则如下</p><div><span class="math display">\[h = \left\{\begin{matrix}0 &amp; if \ h \leq 20^{\circ} \ or\ h \geq 316^{\circ} \\1 &amp; if \ 20^{\circ} &lt; h \leq 40^{\circ}\\2 &amp; if \ 40^{\circ} &lt; h \leq 75^{\circ}\\3 &amp; if \ 75^{\circ} &lt; h \leq 155^{\circ}\\4 &amp; if \ 155^{\circ} &lt; h \leq 190^{\circ}\\5 &amp; if \ 190^{\circ} &lt; h \leq 270^{\circ}\\6 &amp; if \ 270^{\circ} &lt; h \leq 295^{\circ}\\7 &amp; if \ 296^{\circ} &lt; h \leq 315^{\circ}\\\end{matrix}\right.\\s = \left\{\begin{matrix}0 &amp;if \ 0\leq s \leq 0.2  \\1 &amp; if \ 0.2 &lt; s \leq 0.7 \\2 &amp; if \ 0.7 &lt;  s \leq 1\end{matrix}\right.\\v = \left\{\begin{matrix}0 &amp;if \ 0\leq v \leq 0.2  \\1 &amp; if \ 0.2 &lt; v \leq 0.7 \\2 &amp; if \ 0.7 &lt;  v \leq 1\end{matrix}\right.\\\]</span></div><p>至此，我们可以对这8X3X3个区间进行统计，统计每个区间的像素点个数，最后得到一个72维的特征向量。</p><p>类似于RGB，我们可以把每个像素点规约到一个值，用<a href="https://books.google.com/books?id=0XrkAwAAQBAJ&amp;pg=PA68&amp;lpg=PA68&amp;dq=hsv%20%20%209H%20%2b%203S%20%2b%20V&amp;source=bl&amp;ots=2DqBgp86m4&amp;sig=e1yQRbDCcMMm2vMmNP6dKyXcL_k&amp;hl=zh-CN&amp;sa=X&amp;ei=foAPVeTWNcXvoATM64DYBA&amp;ved=0CCAQ6AEwAA#v=onepage&amp;q=hsv%20%20%209H%20%2b%203S%20%2b%20V&amp;f=false" target="_blank" rel="noopener">此文章</a>提到的方法：</p><p><span class="math display">\[G = 9*H + 3*S + V\]</span></p><p>把每个像素点归约到一个<code>[0,72]</code>区间的整数。 进一步地，通过统计每个区间的像素点数量，得到一幅图的一个72维特征向量。即为72HSV直方图</p><h2 id="主体抓取">主体抓取</h2><p>俗称“抠图”，对主体的识别十分关键，算法通常都是围绕边缘识别做文章。 ### <a href="http://en.wikipedia.org/wiki/Otsu%27s_method" target="_blank" rel="noopener">大津法（Otsu method）</a></p><p>峰哥的一篇<a href="http://www.ruanyifeng.com/blog/2013/03/similar_image_search_part_ii.html" target="_blank" rel="noopener">博文</a>也提到了这种方法，主要原理是通过穷举来找到前景色和背景色的最佳阈值，从而提取前景物体 这个算法中有两点需要注意： - 阈值选取 - RGB：用前文提到的量化方式在<code>[0,255]</code>中遍历选最优 - HSV：也用前文的量化方法在<code>[0,72]</code>中遍历选最优</p><ul><li>为方便计算，取类间差异：<span class="math inline">\(w_{1}w_{2}(u_{1}-u_{2})^{2}\)</span> 的最大值。已被证明类间差异取最大值和类内差异取最小值是同样的阈值。</li></ul><p>已本次三张衣服的图片为例，用Otsu对其抠图后，效果分别如下 三张原图： <img src="http://blog-imonxia.qiniudn.com/3clothes.png"> 抠图后，左侧为RGB量化，右侧为HSV量化： <img src="http://blog-imonxia.qiniudn.com/otsu_clothes1.png"> <img src="http://blog-imonxia.qiniudn.com/otsu_clothes2.png"> <img src="http://blog-imonxia.qiniudn.com/otsu_clothes3.png"></p><h2 id="边缘检测">边缘检测</h2><p>所谓图像的边缘，即为图像灰度变化率最大的地方。图像灰度在表面法向变化的不连续造成了图像出现边缘轮廓。一般认为边缘提取是要保留图像的灰度变化剧烈的区域，这从数学上看，最直观的方法就是微分(对于数字图像来说就是差分)。</p><p>梯度的数学表示如下：</p><div><span class="math display">\[G[f(x,y)] = \begin{bmatrix}\frac{\partial f}{\partial x}\\\frac{\partial f}{\partial y}\end{bmatrix} = [G_{x}, G_{y}]^{T} = [\frac{\partial f}{\partial x}, \frac{\partial f}{\partial y}]^{T}\]</span></div><p>实际计算中，为降低计算量，常用以下两种方式来求梯度向量的模：</p><div><span class="math display">\[|G[f(x,y)]| = \sqrt{G_{x}^{2} + G_{y}^{2}} \approx |G_{x}| + |G_{y}|\\|G[f(x,y)]| = \sqrt{G_{x}^{2} + G_{y}^{2}} \approx max(|G_{x}|,|G_{y}|)\]</span></div><p>对于数字图像，梯度用差分表达为：</p><p><span class="math display">\[|G[f(x,y)]| = \sqrt{[f(x,y) - f(x+1,y)]^{2} + [f(x,y) - f(x,y+1)]^{2}}\]</span></p><p>我们选取了一种被广泛使用的算法——Roberts 梯度：</p><p><span class="math display">\[|G[f(x,y)]| = \sqrt{[f(x,y) - f(x+1,y+1)]^{2} + [f(x+1,y) - f(x,y+1)]^{2}}\]</span></p><p>对于给定鞋的目标图片，用Roberts 梯度得到的边缘检测效果如下： <img src="http://blog-imonxia.qiniudn.com/shoe.png"></p><p>更多关于边缘检测的内容，可以参考：<a href="http://pst.nst.pku.edu.cn/teaching/nuclear_medicine/DIPnotes/chapter4/chapter4_3.pdf" target="_blank" rel="noopener">图像锐化</a></p><h2 id="分割获取局部特征">分割获取局部特征</h2><p>图像上不同区域对整幅图特征的贡献是不同的，滤掉无关紧要的背景以突出主体显然十分必要，所以就有了<a href="http://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2" target="_blank" rel="noopener">图像分割</a>。</p><p>利用前面提到的边缘检测，我们可以获得图像的主体部分，对这个主体部分可以进一步提取特征，并且给予它更高的权值，这样可以很好地优化搜索效果。</p><h1 id="相似性比较">相似性比较</h1><h2 id="余弦相似性">余弦相似性</h2><p>即计算两个向量的余弦夹角，夹角越小则相似度越高，更多内容见<a href="http://zh.wikipedia.org/wiki/%E4%BD%99%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7" target="_blank" rel="noopener">wiki</a></p><h2 id="直方图相交法">直方图相交法</h2><p>即计算两个直方图的重合度，规范定义如下： 设a,b是两个含有n个bin的直方图，他们的分量分别为<code>a(i)</code>和<code>b(i)</code>，则他们的直方相交距离为：</p><p><span class="math display">\[D(a,b) = \sum_{i=1}^{n} min(a(i),b(i))\]</span></p><p>为简化计算可做如下转换</p><div><span class="math display">\[K_{\cap }(a,b) = \frac{1}{2}\sum_{i = 1}^{n}(a_{i}+b_{i} - \left | a_{i}-b_{i} \right |)\]</span></div><p>再进一步地归一化到[0,1]</p><h2 id="欧氏距离">欧氏距离</h2><p>即计算两个向量在欧氏空间中的距离，其值为各对应维度的差的平方和再开方，详见<a href="http://zh.wikipedia.org/wiki/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E5%BA%A6%E9%87%8F" target="_blank" rel="noopener">wiki</a></p><h2 id="加权欧氏距离">加权欧氏距离</h2><p>欧氏距离的升级版：</p><div><span class="math display">\[\sqrt{\sum_{i=1}^{n}w_{i}( x_{i} - y_{i} )^{2}}\]</span></div><h1 id="具体实现">具体实现</h1><h2 id="详细步骤">详细步骤</h2><p>特征提取步骤如下：</p><ol type="1"><li>将15万张图片的尺寸统一，比如统一成<code>512*512</code></li><li>利用Otsu抠图，得到图像主体和少量噪声背景</li><li>以RGB或HSV方式，获取整幅图的特征向量</li><li>对第2步得到的图进行边缘检测，进一步抓出图像主体部分</li><li>对第4步得到的主体，用RGB或HSV方式，获取主体的特征向量</li><li>对15万张图重复2~5步</li></ol><p>至此，得到了15万张图片的指纹信息，即两个特征向量。再以hash类型的形式存入redis。</p><p>进入搜索阶段：</p><ol type="1"><li>重复上述1~5的方法，计算出目标图片的两个指纹</li><li>从数据库中读出一张图片，将该图的两个指纹分别与目标图片的两个指纹求相似度（尝试上文提到的各种方法，对比效果），于是得到两个评分，分别代表整体和主体。</li><li>将两个评分加权，得到总分。</li><li>对数据库中所有图片重复2,3步，记录所有总分</li><li>对所有的总分倒排，取出需要的前N张。</li></ol><h2 id="搜索效果">搜索效果</h2><p>经过对上述各种方法的尝试和参数调节，最终采用如下实现效果最优： - 用hsv方式求阈值，从而进行Otsu抠图，得到整幅图的72维特征向量 - 边缘检测抓出的主体，仍采用hsv方式量化，得到主体的72维特征向量 - 相似度比较时，采用直方相交和余弦夹角综合的方式，把两者都归一化到<code>[0,1]</code>再相乘 - 对两个评分加权时，中心部分权值取<code>6~8</code>效果最佳</p><p>以衣服的目标图片1为例，前100搜索结果截图如下： <img src="http://blog-imonxia.qiniudn.com/result_clothes1.png"></p><p>附</p><ul><li>图片集下载地址：<a href="http://pan.baidu.com/share/link?shareid=3724932786&amp;uk=2404571876&amp;third=15" target="_blank" rel="noopener">百度网盘</a></li><li>本文源码：<a href="https://github.com/simon-xia/image_search" target="_blank" rel="noopener">github</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近和几个同学做了一个&lt;a href=&quot;http://pkbigdata.com/c/00000000057&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;比赛&lt;/a&gt;，图片搜索，从15万张衣服和15万张鞋的图片中找出与目标图片最匹配的图。&lt;/p&gt;
&lt;p&gt;整个过程还是挺有意思，以前没接触过图像处理方面的东西，在逐渐地深入之后才发现其博大精深。今天稍作整理，把所做工作小结在此。&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;完成这个过程大致有如下几步， 首先建立搜索引擎：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提取每张图片特征&lt;/li&gt;
&lt;li&gt;根据特征为所有图片建立索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对目标图片的搜索则以上述过程为基础，继续：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提取目标图片特征&lt;/li&gt;
&lt;li&gt;计算目标图片与所有图片的相似度&lt;/li&gt;
&lt;li&gt;将相似度倒排，取需要的前N张&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://simonxia.com/categories/programming/"/>
    
    
      <category term="图像搜索" scheme="http://simonxia.com/tags/%E5%9B%BE%E5%83%8F%E6%90%9C%E7%B4%A2/"/>
    
      <category term="python" scheme="http://simonxia.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>一个小型抢购系统demo——饿了么大学生黑客马拉松小结</title>
    <link href="http://simonxia.com/%E6%8A%A2%E8%B4%ADdemo/"/>
    <id>http://simonxia.com/抢购demo/</id>
    <published>2015-12-02T06:30:00.000Z</published>
    <updated>2018-02-01T03:10:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目内容">题目内容</h1><p>简单地说就是，实现给定的api并尽可能地提高并发量。</p><p>具体规则详见官网：<a href="http://hackathon.ele.me/intro#intro-general" target="_blank" rel="noopener">饿了么全国大学生黑客马拉松</a></p><h1 id="初步设计">初步设计</h1><p>redis 存储 按照业务逻辑拆分为4个库，各司其职，分别如下：</p><table><thead><tr class="header"><th>Db name</th><th>Key type</th><th>Key</th></tr></thead><tbody><tr class="odd"><td>accessTokenDb</td><td>k-v</td><td>accessToken</td></tr><tr class="even"><td>cartDb</td><td>hash</td><td>cartid</td></tr><tr class="odd"><td>orderDb</td><td>hash</td><td>accessToken</td></tr><tr class="even"><td>hasorderedset</td><td>set</td><td>-</td></tr></tbody></table><p>登陆 accessTokenDb 创建和添加购物车 cartDb 下单 orderDb 判断下单唯一性 set</p><a id="more"></a><h1 id="逐步优化">逐步优化</h1><h2 id="业务逻辑">业务逻辑</h2><p>首当其冲的就是库存查询，因为涉及遍历foodDb，在所有流程中耗时最大。 后来仔细分析，其实完全是不必要的开销。因为最后的一致性是通过下单来保证的，没有库存下单直接判false。所以这里的查询返回给用户的具体数值也就没那么重要。最好的解决办法就是直接返回定值的库存，而非实时。最终可把这个接口的响应时间控制在 几十us左右，log如图：</p><p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/eleme-getfoods.png"></p><h2 id="io">io</h2><p>和大多数web应用一样，io是性能的大瓶颈。 在添加购物车和下单流程中，除了核心功能，还涉及权限验证，是否超过购物车上限等判断。所以尽量减少对redis的请求次数，能合并的全合并，可以显著减少io开销。极限点的做法是，把每个逻辑都写成一个lua，业务逻辑全在redis端做。极限的坏处是，把本该属于本地的计算任务加在了数据库端。折衷的方案是把核心业务写在lua里，前期权限验证等在主机，这样非法的请求就不过redis。</p><p>第一次写lua，踩坑太多，忍不住吐槽下：</p><ul><li>首先，一定要注意类型转换，redis和lua返回值之间的相互转换规则参见官方文档：<a href="http://redis.io/commands/eval#conversion-between-lua-and-redis-data-types" target="_blank" rel="noopener">Conversion between Lua and Redis data types</a></li><li>再就是，debug redis中的lua，有几种参考如下，都挺折腾的 ＝。＝<ul><li><a href="https://redislabs.com/blog/5-methods-for-tracing-and-debugging-redis-lua-scripts#.VlGHpWQrKAw" target="_blank" rel="noopener">5 methods for tracing and debugging redis lua scripts</a></li><li><a href="http://www.trikoder.net/blog/make-lua-debugging-easier-in-redis-87/" target="_blank" rel="noopener">Make Lua debugging easier in Redis</a></li></ul></li><li>profiling，我也没找到好的办法，有个workaround 可以参考下：<a href="http://stackoverflow.com/a/16370699/2791115" target="_blank" rel="noopener">Can I profile Lua scripts running in Redis</a></li></ul><p>一个好消息，就在比赛进行的这段时间里，redis作者宣布会在今年12月发布的redis3.2里提供lua debugger.</p><p>原文链接，还附有演示视频： <a href="http://antirez.com/news/97" target="_blank" rel="noopener">Recent improvements to Redis Lua scripting</a>。晚了一步，没赶上好时候 ＝＝||</p><h2 id="异步">异步</h2><p>在本系统中，可以异步的流程有</p><ul><li>创建购物车，返回用户cart_id，异步写redis</li><li>下单，只要通过库存验证，立即返回200，异步保存订单</li></ul><h2 id="缓存">缓存</h2><ul><li>对食物的价格做本地缓存，在查询订单时计算订单总价。减少下单的计算和写redis开销</li><li>本地存一部分订单，优化查询请求。换句话说就是，每台机器在完成下单后，保存这个订单。</li></ul><p>第二点其实可有可无，从概率上说，只有九分之一的订单会在同一台机器上下单并且查询。但最后时间紧迫，没有更多尝试机会，就索性这样了，用空间换时间，效果还是有的，log如图，两个GET差了上百us:</p><p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/eleme-getorder.png"></p><h2 id="连接池">连接池</h2><ul><li>关闭初次获取连接的心跳，节省一个RTT</li><li>关闭超时机制，使连接总数等于最大活跃连接数</li><li>压测时1000连接均衡到三台主机上，考虑一点冗余，每台设置连接池大小500</li></ul><h2 id="redis">redis</h2><ul><li><p>去掉set。sadd操作虽然一箭双雕，既能添加元素，也能在元素存在时返回0。但他的复杂度是O(n)。果断放弃，因为我用token作为order的key，所以直接使用 <code>exists accessToken</code> 判断key是否存在，虽然增加了一条命令，但换取了时间复杂度。</p></li><li><p>用 hincrby 在下单时做库存的扣除，超卖则直接incr回去，而不是在判断完购物车中所有食物均有库存后，依次set。</p></li></ul><h3 id="pubsub">Pub/Sub</h3><p>考虑到redis的publish 机制时，自己开了很多脑洞，有成功也有失败的，罗列一下：</p><h3 id="本地登陆">本地登陆</h3><p>登陆对实时性要求不高，尝试使用本地登陆，然后publish通知accessToken到三台主机上，节约每次登陆时走redis的时间。 此法被验证可行，但后来找到了更好的办法替代，具体就是，因为对token没有超时等限制，直接针对每个用户，使用固定规则生成统一的token，即可实现本地登陆。比如我的token生成方案<code>md5(username+password)</code>，login接口也可控制在几十us级 <img src="http://7s1t7r.com1.z0.glb.clouddn.com/eleme-login.png"></p><h3 id="本地创建购物车">本地创建购物车</h3><p>创建购物车在本地进行，将cart_id和accessToken的映射关系通过publish同步到三台主机。 这样的好处是后续的添加购物车和下单流程中的前期权限验证等流程均可在本地实现，只有设计核心逻辑时走redis。 在实际验证中，虽然ci能过，但由于创建和添加购物车两个逻辑接踵而至，压测的流量上来了，三台主机经常来不及同步。另一方面，这样的同步广播使当时本来就相当拥塞的链路更加拥挤。放弃。</p><h3 id="本地缓存库存">本地缓存库存</h3><p>由于机器数量3台已知，库存总量1000已知。所以从理论上说，只要单台机器上没有商品被卖到333个以上是不可能出现超卖的。所以完全可以让前期下单判断库存是否足够放在本地，一旦有一个商品销量超过333，就使用publish通知到三台主机上，之后的下单逻辑按正常进行，老老实实走redis。</p><p>具体操作是，用全局flag标记本地是否有商品售卖超过333，前期每次来订单，只要合法都成功下单，并在本地记录每个商品销量，一旦有大于333销量的商品出现，则：</p><ol type="1"><li>publish 通知到三台机器上</li><li>本机修改全局标记，同时将缓存的销量pipeline到redis里做扣除</li><li>每台机器收到通知都进行步骤2</li></ol><p>实际测试时考虑到同步延迟、刷新延迟等问题，我把333缩小到了250，最后效果并不理想，也可能是我姿势不对。。。当时时间已经不多，每天只有一次的测试机会已经不允许我做再多的尝试，最后舍弃此方案。 放弃的主要原因是，订单本身是存在redis中，每次下单仍然需要从redis获取订单信息，进而进行库存查询和扣除，即一个RTT已经耗在上面了。而且下单逻辑全在一个lua里，也就多两三条redis指令，按照redis每秒几万条指令的执行速度计算，这个开销可以接受。log反馈也不错：</p><p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/eleme-mkorder.png"></p><h2 id="吹毛求疵">吹毛求疵</h2><ul><li><p>随机生成字符串会占用一定时间开销，改为每个机器预生成一堆，节约每次生成cartid和orderid的时间，直接拿。后来实测，生成一共也就花费100+ms，平均到上万的请求上其实还是微不足道的 ＝。＝</p></li><li><p>使用号称go web中最快的router：<a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="noopener">httprouter</a>,要说横向对比，其实我也不知道，只是参考了一个作者本人自吹自擂的benchmark：<a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="noopener">go-http-routing-benchmark</a></p></li></ul><h2 id="其他辅助">其他辅助</h2><p>log的统计特征分析，虽然后来逐渐发现，其实本地压测的数据意义不大，只能给个导向 = =</p><p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/log_analyze.png"></p><h1 id="几点感想">几点感想</h1><p>一个人折腾了两周终于告一段落。虽然比赛和实际项目有一定的差异，但在实操过程中依然收获不少，每天看榜，上下沉浮，也是因吹丝庭</p><ul><li>猜测-验证-改进。多次在这样的循环中摸索，很享受。</li><li>Think twice, code once。</li></ul><p>好几次出现思考不成熟推理验证不充分，匆忙编码，噼里啪啦键盘一时爽。引以为戒。引用<a href="http://coolshell.cn/articles/5686.html" target="_blank" rel="noopener">耗子哥的一句话</a>作为结尾自勉</p><blockquote><p>聪明的程序员使用50%-70%的时间用来思考，尝试和权衡各种设计和实现，而用30% – 50%的时间是在忙碌着编码，调试和测试。</p></blockquote><p>明天公布成绩，祝大家好运 ^_^</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目内容&quot;&gt;题目内容&lt;/h1&gt;
&lt;p&gt;简单地说就是，实现给定的api并尽可能地提高并发量。&lt;/p&gt;
&lt;p&gt;具体规则详见官网：&lt;a href=&quot;http://hackathon.ele.me/intro#intro-general&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;饿了么全国大学生黑客马拉松&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;初步设计&quot;&gt;初步设计&lt;/h1&gt;
&lt;p&gt;redis 存储 按照业务逻辑拆分为4个库，各司其职，分别如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;Db name&lt;/th&gt;
&lt;th&gt;Key type&lt;/th&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;accessTokenDb&lt;/td&gt;
&lt;td&gt;k-v&lt;/td&gt;
&lt;td&gt;accessToken&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;cartDb&lt;/td&gt;
&lt;td&gt;hash&lt;/td&gt;
&lt;td&gt;cartid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;orderDb&lt;/td&gt;
&lt;td&gt;hash&lt;/td&gt;
&lt;td&gt;accessToken&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;hasorderedset&lt;/td&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;登陆 accessTokenDb 创建和添加购物车 cartDb 下单 orderDb 判断下单唯一性 set&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://simonxia.com/categories/programming/"/>
    
    
      <category term="golang" scheme="http://simonxia.com/tags/golang/"/>
    
      <category term="concurrent" scheme="http://simonxia.com/tags/concurrent/"/>
    
      <category term="黑客马拉松" scheme="http://simonxia.com/tags/%E9%BB%91%E5%AE%A2%E9%A9%AC%E6%8B%89%E6%9D%BE/"/>
    
  </entry>
  
  <entry>
    <title>HTTP2 前瞻</title>
    <link href="http://simonxia.com/HTTP2-%E5%89%8D%E7%9E%BB/"/>
    <id>http://simonxia.com/HTTP2-前瞻/</id>
    <published>2015-03-22T07:30:26.000Z</published>
    <updated>2018-02-01T02:10:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天和<a href="http://www.zhihu.com/people/ye-lou-jiang" target="_blank" rel="noopener">液漏酱</a>同学一起翻译<a href="http://daniel.haxx.se/" target="_blank" rel="noopener">Daniel Stenberg</a>的<a href="http://daniel.haxx.se/http2/" target="_blank" rel="noopener">http2 explained</a> ，发现http2有很多让人期待的特性，本文在此做一个简单介绍。</p><p>前天正好是Daniel代表作curl的<a href="http://daniel.haxx.se/blog/2015/03/20/curl-17-years-old-today/" target="_blank" rel="noopener">17岁生日</a>，在此祝这位HTTP协议界的前辈生日快乐！ XD</p><h1 id="二进制">二进制</h1><p>http2将全面启用二进制，主要有以下两大优势：</p><a id="more"></a><ul><li><p>解析和成帧更方便</p><p>文本协议中的空白符和其他冗余字符会使得协议的解析变得复杂，尤其是在识别一个帧的起始和结束字段时。另一方面，用二进制表示后，从中分离出某个特定的字段也变得非常方便。不过给各位同学带来的麻烦是，以后要查看http报文，必须得借助wireshark之类的工具才行了。</p></li><li><p>体积减小</p><p>采用二进制后，http将变得更紧凑，每个报文的体积更小，在大规模web应用随处可见的今天，无疑可以更好地节省网络资源。</p></li></ul><h1 id="多路复用">多路复用</h1><p>这是http2较为显著的一个改进，主要是为了提高每个TCP连接的利用率。</p><p>眼下的网页都越来越复杂，包含的对象数量只增不减，对象的大小也是逐渐增大。<a href="http://daniel.haxx.se/http2/" target="_blank" rel="noopener">http2 explained</a>中对一些流行网站的统计显示，他们的平均资源数量均超过100，大小累计超过1.9M。如图：</p><p><img src="http://blog-imonxia.qiniudn.com/http2_obj.png"></p><p>对每个对象都需要一个独立的http请求，为此从客户端和主机之间需要建立多个tcp连接来获得更好的上网体验，这样一来服务器端的压力就大大增加。而http2的愿景是，从客户端到每个主机只需要一条tcp连接，通过把它维持得更长久来满足需求。同时，在这个连接上，通过“流”的多路复用来提高利用率。</p><p>其实早在http1.1中，pipeline就被提出来，用以解决批量提交http请求的问题，但由于这样或那样的原因，一直没有得到很好的普及和实现。</p><p>这里所谓的“流”实际上是一个逻辑上的结合，是一个独立的，双向的帧序列，通过它，两个端点间实现通信。许多个流交织在一起，跑在一个tcp连接上，在目的地再被区分开来。</p><h1 id="流的优先级">流的优先级</h1><p>有了流的多路复用，就会有优先级。设置优先级的主要目的是从多个流中区分出重要程度，同时优先级里还有依赖参数，用以指定流的依赖关系。</p><p>http2 流的优先级能够动态改变，浏览器可以指定哪些元素具有更高的优先级，如此可以优先把最重要的部分呈现给用户。</p><h1 id="服务端推送">服务端推送</h1><p>这个功能非常强大，举例说来就是，客户端在请求资源A时，服务器再回送资源A的同时也猜测到客户端可能需要资源B甚至C和D，所以，服务器直接将BCD推送给客户端，当然这是在一个新的流上完成。</p><p>上面提到的BCD通常来说是一些图片或者js脚本，主要是由于他们对相应页面的依赖较大。如此，可有效地减少在客户端和服务器端的往返时延。</p><p>来一张图对比下：</p><p><img src="http://blog-imonxia.qiniudn.com/http2_push.png"></p><h1 id="流重置">流重置</h1><p>http2提供了后悔药，当我们希望能立即停止当前消息的发送再重新发一个新的时候，通过http2 的RST_STREAM帧即可实现，而http1.1中唯一的办法就是切断整个tcp连接。这样一来，既防止了带宽浪费，也复用了已有连接，避免了再次建立的开销。</p><p>同时，对上一小结提到的服务端推送场景，如果客户端发现服务器推送的资源不是自己所需的，那么它可以立即发送一个RST_STREAM来终止服务器推送。</p><h1 id="头部压缩">头部压缩</h1><p>http本身是无状态协议，所以才有了cookie的诞生。这带来的另外一个问题是，http头部增大，而当请求同一个网站的资源时，这些臃肿的头部看起来几乎是一样的，这就给压缩提供了充足的理由。http2小组正在尝试设计合适的头部压缩格式——<a href="http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12" target="_blank" rel="noopener">HPACK</a></p><h1 id="小结">小结</h1><p>http2主要是从google的<a href="http://en.wikipedia.org/wiki/SPDY" target="_blank" rel="noopener">SPDY</a>发展而来，仍然背负了许多包括http1在内的历史包袱，主要也是从向下兼容的角度考虑，保证数据能在http1和http2之间无碍地转发。</p><p>虽然目前一些知名的浏览器厂商如Chrome和Firefox已经逐渐开始实现和支持http2，但要实现http1到http2 的升级还有很长的路要走，让我们对http2 将带来的全新体验拭目以待。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天和&lt;a href=&quot;http://www.zhihu.com/people/ye-lou-jiang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;液漏酱&lt;/a&gt;同学一起翻译&lt;a href=&quot;http://daniel.haxx.se/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Daniel Stenberg&lt;/a&gt;的&lt;a href=&quot;http://daniel.haxx.se/http2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http2 explained&lt;/a&gt; ，发现http2有很多让人期待的特性，本文在此做一个简单介绍。&lt;/p&gt;
&lt;p&gt;前天正好是Daniel代表作curl的&lt;a href=&quot;http://daniel.haxx.se/blog/2015/03/20/curl-17-years-old-today/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;17岁生日&lt;/a&gt;，在此祝这位HTTP协议界的前辈生日快乐！ XD&lt;/p&gt;
&lt;h1 id=&quot;二进制&quot;&gt;二进制&lt;/h1&gt;
&lt;p&gt;http2将全面启用二进制，主要有以下两大优势：&lt;/p&gt;
    
    </summary>
    
      <category term="network" scheme="http://simonxia.com/categories/network/"/>
    
    
      <category term="http2" scheme="http://simonxia.com/tags/http2/"/>
    
      <category term="network" scheme="http://simonxia.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>那些先贤们的奇技淫巧</title>
    <link href="http://simonxia.com/%E9%82%A3%E4%BA%9B%E5%85%88%E8%B4%A4%E4%BB%AC%E7%9A%84%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    <id>http://simonxia.com/那些先贤们的奇技淫巧/</id>
    <published>2015-01-09T11:09:00.000Z</published>
    <updated>2018-02-02T17:33:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>前天在知乎上回答了一个问题，很有意思：<a href="http://www.zhihu.com/question/27417946/answer/36651800" target="_blank" rel="noopener">C 语言有什么奇技淫巧</a>，最高票的答案令人捧腹。</p><p>大笑之余，搜罗了一些前辈们戏耍的黑魔法整理成此文，种种精妙，回味无穷。</p><h1 id="x5f3759df">1. 0x5f3759df</h1><p><a href="http://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E5%8D%A1%E9%A6%AC%E5%85%8B" target="_blank" rel="noopener">卡马克大神</a>的0x5f3759df黑魔法必须最先被抬出来镇楼，此数被用在他的代表作《雷神之锤3》的浮点数平方根倒数的计算中，直接在速度上甩开标准库函数<code>sqrt()</code>4倍。</p><a id="more"></a><p>直接看代码，此数的气场可见一斑，摘自维基百科：<a href="http://zh.wikipedia.org/wiki/%E5%B9%B3%E6%96%B9%E6%A0%B9%E5%80%92%E6%95%B0%E9%80%9F%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">平方根倒数速算法</a> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">Q_rsqrt</span><span class="params">( <span class="keyword">float</span> number )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> i;</span><br><span class="line"><span class="keyword">float</span> x2, y;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> threehalfs = <span class="number">1.5F</span>;</span><br><span class="line"></span><br><span class="line">x2 = number * <span class="number">0.5F</span>;</span><br><span class="line">y  = number;</span><br><span class="line">i  = * ( <span class="keyword">long</span> * ) &amp;y;                       <span class="comment">// evil floating point bit level hacking</span></span><br><span class="line">i  = <span class="number">0x5f3759df</span> - ( i &gt;&gt; <span class="number">1</span> );               <span class="comment">// what the fuck?</span></span><br><span class="line">y  = * ( <span class="keyword">float</span> * ) &amp;i;</span><br><span class="line">y  = y * ( threehalfs - ( x2 * y * y ) );   <span class="comment">// 1st iteration</span></span><br><span class="line"><span class="comment">//  y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>算法的分析在维基里已经阐述得非常详尽。总的说来，原理也不难，依旧是用的传统的牛顿迭代，只是迭代起点的选取非常厉害，精度之高，令人咋舌。这段代码里还利用浮点数的底层性质玩了一个trick，关于IEEE标准的浮点数表示，可以参考<a href="http://book.douban.com/subject/1230413/" target="_blank" rel="noopener">CSAPP CH2.4</a>。</p><h1 id="自打印引发的血案">2. 自打印引发的血案</h1><p>这得从<a href="http://www.zhihu.com/question/26866999" target="_blank" rel="noopener">汤普逊</a>爷爷的那个老梗说起</p><blockquote><p>当年 Ken Thompson 可以大摇大摆地走到任何一台 UNIX 机器前，以root登录。后来其它人去掉了 UNIX 内核的后门，又有人重写了编译器，均不管用。后来 Ken Thompson 揭秘，后门在世界上第一个 C 语言编译器里。</p></blockquote><p>这个故事是汤普逊在1984年获得图灵奖时讲述的，并在《ACM通讯》上发表了<a href="http://cm.bell-labs.com/who/ken/trust.html" target="_blank" rel="noopener">文章</a>加以分析。</p><p>看个简单的<a href="http://www.cprogramming.com/challenges/solutions/self_print.html" target="_blank" rel="noopener">例子</a>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> *program = <span class="string">"#include &lt;stdio.h&gt;%cchar *program = %c%s%c;%cint main()%c&#123;%c</span></span><br><span class="line"><span class="string">printf(program, 10, 34, program, 34, 10, 10, 10, 10, 10, 10);%c    return 0;%c&#125;%c"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(program, <span class="number">10</span>, <span class="number">34</span>, program, <span class="number">34</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行这段代码，会得到一个它自身源码的输出。这样的代码就被称作自打印程序（self-replicating programs），当然它有一个更专业的名字叫<a href="http://en.wikipedia.org/wiki/Quine_%28computing%29" target="_blank" rel="noopener">Quine</a>，理论上，任何一个图灵完备语言都能实现。</p><p>汤普逊就是在第一个C语言编译器中插入了这样的后门，这样，不管是用这个编译器编译出来的程序还是编译器都会中招。这就是底层漏洞的威力。</p><p>中科大李博杰同学的一篇<a href="https://ring0.me/2014/11/insert-backdoor-into-compiler/" target="_blank" rel="noopener">博客</a>在tcc上做了一个proof of concept，有兴趣的朋友可以看看。</p><h1 id="xor-linked-list">3. XOR linked list</h1><p>这就是本文开头提到的，直接把自己的答案贴过来：</p><blockquote><p>利用C的按位异或只用一个字节的指针信息就实现双向链表。除了开头和结尾，每个节点保存其相邻节点的地址的异或结果，正向遍历时用当前节点地址字段中保存的值异或后一个，反向遍历时异或前一个。而开头节点存下一个节点地址，尾节点保存前一节点地址。 这样一来，用一个接口就能实现链表双向遍历，还比双链表节省空间。</p></blockquote><p>与此类似，还有Addition linked list等，更多信息，参考：<a href="http://en.wikipedia.org/wiki/XOR_linked_list" target="_blank" rel="noopener">维基百科：XOR linked list</a></p><p>更多内容更新中…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前天在知乎上回答了一个问题，很有意思：&lt;a href=&quot;http://www.zhihu.com/question/27417946/answer/36651800&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C 语言有什么奇技淫巧&lt;/a&gt;，最高票的答案令人捧腹。&lt;/p&gt;
&lt;p&gt;大笑之余，搜罗了一些前辈们戏耍的黑魔法整理成此文，种种精妙，回味无穷。&lt;/p&gt;
&lt;h1 id=&quot;x5f3759df&quot;&gt;1. 0x5f3759df&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E5%8D%A1%E9%A6%AC%E5%85%8B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;卡马克大神&lt;/a&gt;的0x5f3759df黑魔法必须最先被抬出来镇楼，此数被用在他的代表作《雷神之锤3》的浮点数平方根倒数的计算中，直接在速度上甩开标准库函数&lt;code&gt;sqrt()&lt;/code&gt;4倍。&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://simonxia.com/categories/programming/"/>
    
    
      <category term="programming" scheme="http://simonxia.com/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>为什么以太网帧的最小载荷是46字节</title>
    <link href="http://simonxia.com/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%B8%A7%E7%9A%84%E6%9C%80%E5%B0%8F%E8%BD%BD%E8%8D%B7%E6%98%AF46%E5%AD%97%E8%8A%82/"/>
    <id>http://simonxia.com/为什么以太网帧的最小载荷是46字节/</id>
    <published>2014-12-24T12:30:00.000Z</published>
    <updated>2018-02-02T17:33:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在和同学讨论以太帧时发现这个问题，为什么偏偏是46这个看起来很奇怪的数字。</p><p>至于载荷的上限1500Byte就比较好理解，帧太长会造成某个发送主机长时间占用着信道，同时对发送和接受缓存的设计也要相应增大，会阻碍发送和接收效率。</p><h2 id="突然想起您">突然想起您</h2><p>零零散散看了些东西，小结一个，顺便复习下当年<a href="http://baike.baidu.com/view/1203913.htm" target="_blank" rel="noopener">雷老头子</a>在《局域网与城域网》课上讲的内容，并怀念下雷老师，本科期间为数不多的给我印象深刻的老师，随和博学的一位长者。更难能可贵的是，这么大年纪还站在讲台的第一线，并且每节课都讲得饱含激情，诗词歌赋信手拈来，课上学子无不沉醉，经常教育我们理工学生要多读国学经典。有幸当了他的最后一届学生，抓住了大师风采的尾巴。</p><a id="more"></a><p>从电脑上翻出一张珍贵史料，雷老师退休前的最后一节课（此处应有掌声）</p><p><img src="http://blog-imonxia.qiniudn.com/C360_2011-11-22%2015-17-47.jpg"></p><h2 id="从帧格式说起">从帧格式说起</h2><p>以太帧格式如下</p><p><img src="http://blog-imonxia.qiniudn.com/ethernet_frame.png"></p><p>可见加上头和尾部的FCS一共18字节（前导8字节不算），这个问题其实等效于，为什么以太帧最小长度为64字节。</p><p>这得从以太帧的发送机制说起，以太帧采用简单的重发机制以确保准确投递，为什么是重发，而不是确认等方式呢？很简单，因为重发效率高，以太网上是微秒级，但到高层就不一样了，越往上效率越低，网络层和传输层会达到毫秒级，应用层甚至会到秒级。</p><p>具体地说，IEEE802.3规定以太网帧的发送机制是<a href="http://en.wikipedia.org/wiki/Carrier_sense_multiple_access_with_collision_detection" target="_blank" rel="noopener">CSMA/CD</a>，记得当年<a href="http://book.douban.com/subject/3208669/" target="_blank" rel="noopener">教材《局域网与城域网》</a>（雷老师的大作）上的翻译是<strong>带冲突检测的载波侦听多路访问</strong>，真够绕口的，当初恁是活生生地记下来了</p><p>简言之，这个机制就是</p><ul><li>空闲发送：先检测链路上是否空闲，再判断是否发送数据</li><li>边听边发：一边发送数据，一边侦听冲突</li><li>遇到冲突停止发送，并伺机重发</li></ul><p>最后一点的具体机制是一旦在发的过程中检测到冲突就停止发送，并且还变本加厉地发送干扰串（连续6个字节的全1信号），这样做的目的是让那些可能参与碰撞但尚未感知到冲突的结点，能够明显的感知，也就相当于增强冲突信号。在此之后，将随机等待一段时间再发送，如果仍然冲突，将会采用<a href="http://en.wikipedia.org/wiki/Exponential_backoff#Binary_exponential_backoff_.2F_truncated_exponential_backoff" target="_blank" rel="noopener">binary exponential backoff</a>算法计算等待时间并发送，16次以后放弃。</p><p>这样一来限制最小帧长度就很有必要了。按照以上规则，如果某个节点在发送完帧才检测到冲突就会认为该帧已经成功发送，而实际情况是，该帧还有可能飞奔在去往目的的路上，毫无疑问等待这个帧的命运是悲惨的。为了避免这样的悲剧发生，就必须保证节点在收到冲突信号时，帧还没发送完毕，这样就可以伺机再重新发送。而从发送帧到收到碰撞信号的时间间隔，正好是一个信号从源到目的的来回时间。这个时间被称作<a href="http://en.wikipedia.org/wiki/Slot_time" target="_blank" rel="noopener">Slot time</a>，IEEE规定10M和100M以太网在一个碰撞域内，它的值要小于512bit time。</p><p>而为什么是512bit time呢？以10M以太网为例，标准规定两个收发端之间的最大距离是2.5km（允许4个中继），把信号按0.7倍光速计算，一个往返的时延是</p><p><span class="math display">\[  2.5*2/(0.7*300000) = 23.8us \]</span> 再加上中继的转发代价20us，以及强化冲突发送的48bit，即4.8us，上述之和为48.6us 。计算很粗略但基本接近真实状况，所以最后标准取了51.2us 作为10M以太网的争用时间，即上文说的slot time。</p><p>这样一来，512bit time正好能发送64Byte的数据，所以以太帧的最小长度由此确定。值得注意的是，虽然64Byte在10M和100M以太网上很适用，但对于1000M以太网这个长度仍然不够，因此引入了<a href="http://docwiki.cisco.com/wiki/Ethernet_Technologies#Half-Duplex_Transmission-The_CSMA.2FCD_Access_Method" target="_blank" rel="noopener">Carrier Extension</a>机制，增至4096bit</p><p>正如<a href="http://en.wikipedia.org/wiki/Slot_time" target="_blank" rel="noopener">维基百科</a>最后对slot time的注释</p><blockquote><p>Slot time is only applicable to half-duplex transmissions. Since slot time is the time required to wait for the medium to be free from transmissions, there is no time required to wait for full-duplex transmissions. 10 Gbit/s is a full duplex technology, so slot time is not applicable here.</p></blockquote><p>现在的以太网实际上并不是共享介质（shared medium），在全双工的链路上没必要强制规定以太帧的最小值，但是出于向前兼容等考虑，你懂的。</p><p>所以，总结起来这只不过是一个历史遗留问题罢了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在和同学讨论以太帧时发现这个问题，为什么偏偏是46这个看起来很奇怪的数字。&lt;/p&gt;
&lt;p&gt;至于载荷的上限1500Byte就比较好理解，帧太长会造成某个发送主机长时间占用着信道，同时对发送和接受缓存的设计也要相应增大，会阻碍发送和接收效率。&lt;/p&gt;
&lt;h2 id=&quot;突然想起您&quot;&gt;突然想起您&lt;/h2&gt;
&lt;p&gt;零零散散看了些东西，小结一个，顺便复习下当年&lt;a href=&quot;http://baike.baidu.com/view/1203913.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;雷老头子&lt;/a&gt;在《局域网与城域网》课上讲的内容，并怀念下雷老师，本科期间为数不多的给我印象深刻的老师，随和博学的一位长者。更难能可贵的是，这么大年纪还站在讲台的第一线，并且每节课都讲得饱含激情，诗词歌赋信手拈来，课上学子无不沉醉，经常教育我们理工学生要多读国学经典。有幸当了他的最后一届学生，抓住了大师风采的尾巴。&lt;/p&gt;
    
    </summary>
    
      <category term="network" scheme="http://simonxia.com/categories/network/"/>
    
    
      <category term="network" scheme="http://simonxia.com/tags/network/"/>
    
      <category term="Ethernet" scheme="http://simonxia.com/tags/Ethernet/"/>
    
      <category term="frame" scheme="http://simonxia.com/tags/frame/"/>
    
  </entry>
  
  <entry>
    <title>浅析 C 的异常和错误处理</title>
    <link href="http://simonxia.com/c-exception/"/>
    <id>http://simonxia.com/c-exception/</id>
    <published>2014-12-19T07:22:26.000Z</published>
    <updated>2018-05-29T06:16:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见方式">常见方式</h1><p>一般来说，错误处理有两种方式</p><ul><li>终止：错误太蛋疼，难以挽回，终止程序执行</li><li>恢复：小错误，给程序一次改过自新的机会，回滚到出错前某个位置，再次执行</li></ul><p>C中的终止：</p><ul><li>两个标准库函数：<code>abort()</code>和<code>exit()</code></li><li>一个宏： <code>void assert(int expression);</code>　它的实现实际上最后也是调用abort()</li></ul><p>对于错误处理，C的风格是通过error code实现，其头文件errno.h已定义了不少errno。在配合<code>perror()</code>使用下，可以得到更多详细信息。标准库果断采用了这种方式，简明优雅。</p><a id="more"></a><p>更进一步地，可以用包裹函数配合errno对所用函数进行进一步的封装，<a href="http://book.douban.com/subject/1500149/" target="_blank" rel="noopener">UNP</a>中就广泛地使用了这种风格。这样的处理的弊端是带来了进一步的函数调用开销，同时这样的封装扩展性也不是很好，会收到业务逻辑的影响。</p><p>由于errno变量的全局性，使得它的实现并不总是线程安全的。同时虽然在ANSI C中有定义一些基本的errno，并且操作系统也会扩展一部分，但是依然无法改变其对错误描述的匮乏.</p><p>当然也可以借助信号，使用signal()设置信号，调用raise引发信号，并进入相应的异常处理过程</p><p>关于处理风格的问题，陈皓曾经也有<a href="http://coolshell.cn/articles/551.html" target="_blank" rel="noopener">文章</a>探讨过，我更喜欢第二种，表意简洁，易读性也好，虽然用了goto。其实个人感觉goto也没什么不好，一味地教条不用goto和乱用goto的本质是一样的，在文中这个场景，goto就恰到好处。</p><p>该文的<a href="http://coolshell.cn/articles/551.html#comment-49" target="_blank" rel="noopener">评论区</a>出现了一个很优雅的方式，利用&amp;&amp;短路，搬运过来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( do_something() &amp;&amp; init_stuff() &amp;&amp; prepare_stuff() ) &#123;</span><br><span class="line">    <span class="keyword">return</span> do_the_ting();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/* return error. make sure you have cleaned up the enviroment e.g. free the memory you have allocated */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用setjmp和longjmp为c打造异常处理">用setjmp和longjmp为C打造异常处理</h1><p>首先是关于jmp_buf，它的实际定义是一个数组，用于存储当前的上下文，如EIP等。有一种实现方式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">jmp_buf</span> &#123;</span> <span class="keyword">int</span> _jb[_JBLEN + <span class="number">1</span>]; &#125; jmp_buf[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>云风还曾在<a href="http://blog.codingnow.com/2005/12/typedef_struct_array.html" target="_blank" rel="noopener">一篇文章</a>中称赞这个定义的精妙：传递时会直接被当作指针引用，避免了拷贝的开销。</p><p>而setjmp和longjmp一般通过汇编实现，<a href="http://book.douban.com/subject/1767969/" target="_blank" rel="noopener">C: A Reference Manual (5th Edition)</a>还煞有介事地说：</p><blockquote><p>The only reliable way to implement setjmp and longjmp requires functions written in assembly language. You need an intimate knowledge of how the translator generates code. You also need to peiform several operations that you cannot express safely in C, if at all.</p></blockquote><p>可以参考<a href="http://www.embecosm.com/appnotes/ean9/html/ch04s01s02.html" target="_blank" rel="noopener">Implementing the setjmp and longjmp functions.</a></p><p>这两者为c程序提供了区别于传统调用栈的另一种执行流程，通常用在错误处理中。</p><p>利用此点，我们可以对它们做一个浅层的封装，使c也引入其他高级语言的异常处理机制。同时，可以在静态存储区或堆上维护一个异常的调用链，使这种异常处理机制可以实现嵌套。</p><p>因此我们可以这样定义调用帧和一个全局帧标识</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">except_frame_tag</span> &#123;</span></span><br><span class="line">jmp_bufjp_buf;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">except_frame_tag</span>*<span class="title">prev</span>;</span></span><br><span class="line"><span class="keyword">int</span>ret;</span><br><span class="line"><span class="keyword">char</span>*msg;</span><br><span class="line">&#125;Except_frame;</span><br><span class="line">Except_frame *cur_frame;</span><br></pre></td></tr></table></figure><p>然后如下定义几个宏，模拟try-except机制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRY \</span></span><br><span class="line"><span class="keyword">do</span> &#123; \</span><br><span class="line">Except_frame *tmp_frame = (Except_frame*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Except_frame)); \</span><br><span class="line">assert(tmp_frame); \</span><br><span class="line">tmp_frame-&gt;prev = cur_frame; \</span><br><span class="line">cur_frame = tmp_frame; \</span><br><span class="line"><span class="keyword">if</span> (!(cur_frame-&gt;ret = setjmp(tmp_frame-&gt;jp_buf))) &#123; \</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPT(e) \</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((e) == cur_frame-&gt;ret) &#123; \</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s\n"</span>, cur_frame-&gt;msg);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELSE \</span></span><br><span class="line">&#125; <span class="keyword">else</span>  &#123; \</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Unkown error!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FINALLY \</span></span><br><span class="line">&#125; &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RISE(e, s) \</span></span><br><span class="line">cur_frame-&gt;msg = (<span class="keyword">char</span>*)(s); \</span><br><span class="line">longjmp(cur_frame-&gt;jp_buf, (e));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> END_TRY \</span></span><br><span class="line">&#125; \</span><br><span class="line">Except_frame *tmp = cur_frame; \</span><br><span class="line">cur_frame = cur_frame-&gt;prev; \</span><br><span class="line"><span class="built_in">free</span>(tmp); \</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>用TRY包含需要执行的部分，然后每个EXCEPT处理特定异常，ELSE处理未知的其他异常，FINALLY处理一些收尾工作，用END_TRY结束。</p><p>测试代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TRY</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"first try\n"</span>);</span><br><span class="line">TRY</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"first inside try\n"</span>);</span><br><span class="line">RISE(SUCK2, <span class="string">"hehe"</span>)</span><br><span class="line">EXCEPT(SUCK1)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"get a inside exception 1\n"</span>);</span><br><span class="line">EXCEPT(SUCK2)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"get a inside exception 2\n"</span>);</span><br><span class="line">END_TRY</span><br><span class="line">RISE(SUCK3, <span class="string">"wtf"</span>);</span><br><span class="line">EXCEPT(SUCK1)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"get a exception 1\n"</span>);</span><br><span class="line">EXCEPT(SUCK2)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"get a exception 2\n"</span>);</span><br><span class="line">ELSE</span><br><span class="line"></span><br><span class="line">FINALLY</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"here is finally\n"</span>);</span><br><span class="line">END_TRY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="http://7s1t7r.com1.z0.glb.clouddn.com/c_exception1.png"></p><p>至此，已基本实现了嵌套异常的捕获</p><h1 id="小结">小结</h1><p>虽然我在上面用宏折腾半了天，但功能还是很脆弱的。</p><p>首先，异常的类型很单一，因为是通过setjmp的返回值来匹配异常，所以只对int型的有效。这点很容易改进，给两个参考：</p><p>早在1989年，E.S.Roberts就有一篇类似的文章：<a href="http://www.hpl.hp.com/techreports/Compaq-DEC/SRC-RR-40.pdf" target="_blank" rel="noopener">Implementing Exceptions in C</a> 另一个参考：<a href="http://www.di.unipi.it/~nids/docs/longjump_try_trow_catch.html" target="_blank" rel="noopener">Exceptions in C with Longjmp and Setjmp</a></p><p>另一个问题就是硬伤了————没有gc的exception都是耍流氓</p><p>冯东就曾在<a href="http://techsingular.net/?p=2153" target="_blank" rel="noopener">谈lua的异常</a>时指出，GC机制的缺乏导致C的异常处理如若无物，longjmp也只是单纯地下降栈顶，并不对抛弃的栈做任何处理，也不对已分配资源做回收。C++在此基础上有所改进，可以参看<a href="http://www.codeproject.com/Articles/2126/How-a-C-compiler-implements-exception-handling" target="_blank" rel="noopener">How a C++ compiler implements exception handling</a></p><p>有一个比较可靠的实现是微软在win下的<a href="http://msdn.microsoft.com/en-us/library/vstudio/swezty51.aspx" target="_blank" rel="noopener">SEH (Structured Exception Handling)</a>，它的<a href="http://en.wikipedia.org/wiki/Microsoft-specific_exception_handling_mechanisms#Structured_Exception_Handling" target="_blank" rel="noopener">wiki</a></p><p>总结起来就是，用合适的方法干合适的事，没有条件创造条件的结果都是强扭的瓜不甜。</p><p>更进一步的话题就是关于异常机制的设计了，放一个轮子哥的<a href="http://www.cppblog.com/vczh/archive/2013/06/10/200920.html" target="_blank" rel="noopener">博文</a>作为结尾镇楼</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常见方式&quot;&gt;常见方式&lt;/h1&gt;
&lt;p&gt;一般来说，错误处理有两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;终止：错误太蛋疼，难以挽回，终止程序执行&lt;/li&gt;
&lt;li&gt;恢复：小错误，给程序一次改过自新的机会，回滚到出错前某个位置，再次执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C中的终止：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个标准库函数：&lt;code&gt;abort()&lt;/code&gt;和&lt;code&gt;exit()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个宏： &lt;code&gt;void assert(int expression);&lt;/code&gt;　它的实现实际上最后也是调用abort()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于错误处理，C的风格是通过error code实现，其头文件errno.h已定义了不少errno。在配合&lt;code&gt;perror()&lt;/code&gt;使用下，可以得到更多详细信息。标准库果断采用了这种方式，简明优雅。&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://simonxia.com/categories/programming/"/>
    
    
      <category term="exception" scheme="http://simonxia.com/tags/exception/"/>
    
      <category term="c" scheme="http://simonxia.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C语言声明解析的简单实现</title>
    <link href="http://simonxia.com/cdecl/"/>
    <id>http://simonxia.com/cdecl/</id>
    <published>2014-12-04T14:30:26.000Z</published>
    <updated>2018-02-01T13:18:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="扯点蛋先">扯点蛋先</h1><p>c语言的声明形式和使用形式极其相似，这样的好处是减少编译器的负担，因为使用和声明采用相同的一套优先级和结合性。</p><p>但是这样带来的麻烦就是，当声明的嵌套太多时，从语法上不能直观地读出含义。违反从左至右阅读的自然方式。另一方面，C的操作符优先级体系本身也有15级之多，这也是C久被诟病之处</p><p>《C专家编程》的作者在书中(Ch3.1)毫不避讳地指出</p><blockquote><p>It’s no exaggeration to say that C is significantly and needlessly complicated because of the awkward manner of combining types</p></blockquote><p>作者还把K&amp;R也抬出来</p><blockquote><p>C is sometimes castigated for the syntax of its declarations</p></blockquote><p>因此，go语言就坚决摒弃了这种反人类的做法。把变量类型后置，使其无论在多少层嵌套和组合下都显得更加human friendly。曾经UNIX小组成员，今go系干将Rob Pike还专门写了一篇<a href="http://blog.golang.org/gos-declaration-syntax" target="_blank" rel="noopener">博文</a>来解释go这样设计的目的。</p><a id="more"></a><h1 id="声明组成">声明组成</h1><p>要细分析声明组成，就要带出学院派的这一堆（以下两个表格摘自《C专家编程》）</p><p>关于声明器： <img src="http://blog-imonxia.qiniudn.com/declartor.png" alt="declarator"></p><p>关于声明的组成 <img src="http://blog-imonxia.qiniudn.com/declaration.png" alt="declaration"></p><p>常见的几种组合： - 多维数组： int array[][] - 返回函数指针的函数： float (<em>fun())() - 函数指针数组: int (</em>array[])() - 返回数组指针函数： double (*fun())[]</p><h1 id="解析规则">解析规则</h1><p>一图胜千言</p><p><img src="http://blog-imonxia.qiniudn.com/declaration_c.png"></p><p>其实图中所示流程，即为通常所说的Spiral Rule。</p><p>更详细的解释可以参看：<a href="http://c-faq.com/decl/spiral.anderson.html" target="_blank" rel="noopener">The ``Clockwise/Spiral Rule’’</a></p><h1 id="简单实现">简单实现</h1><p>有一个有趣的网站<a href="http://cdecl.org/" target="_blank" rel="noopener">cdecl.org/</a>，可以在线解析C的声明，该网站还提供了一个编译器的前端供<a href="http://cdecl.org/files/cdecl-blocks-2.5.tar.gz" target="_blank" rel="noopener">下载</a>，感兴趣的同学可以围观下</p><p>按照上述流程，大致框架如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * a recursive function to parser the declaration</span></span><br><span class="line"><span class="comment"> * @param set:a pointer to Token set which is used to store the classified token</span></span><br><span class="line"><span class="comment"> * @param stack:a pointer to Token stack which is used to help parser</span></span><br><span class="line"><span class="comment"> * @set_index:index of token after the IDENTIFIER in Token set</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> _declaration_parser(Token_set *<span class="built_in">set</span>, Token_stack *st, <span class="keyword">int</span> set_index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">set</span>-&gt;<span class="built_in">set</span>[set_index].type == LEFT_SQUARE_BRACKETS)</span><br><span class="line">parser_for_array(<span class="built_in">set</span>, set_index);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">set</span>-&gt;<span class="built_in">set</span>[set_index].type == LEFT_PARENTHESES)</span><br><span class="line">parser_for_function(<span class="built_in">set</span>, set_index);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (st-&gt;size != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (st-&gt;<span class="built_in">stack</span>[st-&gt;size - <span class="number">1</span>].type == LEFT_PARENTHESES) &#123;</span><br><span class="line">token_stack_pop(st);</span><br><span class="line">_declaration_parser(<span class="built_in">set</span>, st, find_pair_right_parentheses(<span class="built_in">set</span>, set_index) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (st-&gt;<span class="built_in">stack</span>[st-&gt;size - <span class="number">1</span>].type == ASTERISK) &#123;</span><br><span class="line">token_stack_pop(st);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"pointer to "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (st-&gt;<span class="built_in">stack</span>[st-&gt;size - <span class="number">1</span>].type == BASIC_TYPE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>, st-&gt;<span class="built_in">stack</span>[st-&gt;size<span class="number">-1</span>].token);</span><br><span class="line">token_stack_pop(st);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此程序对《C专家编程》上的例子小作改进，使其能够递归地解析复杂的函数参数。 以知名的 signal() 为例，它的原型如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (*signal(<span class="keyword">int</span> sig, <span class="keyword">void</span> (*func)(<span class="keyword">int</span>)))(<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><p>本程序解析结果如下</p><p><img src="https://github.com/simon-xia/tiny_cdecl/raw/master/example_output.png"></p><p>对比<a href="http://cdecl.org/" target="_blank" rel="noopener">cdecl.org/</a>的解析结果</p><p><img src="http://blog-imonxia.qiniudn.com/result_cdecl_org.png"></p><p>基本吻合，我的还能读到变量名，感觉自己萌萌哒 :)</p><p>全部代码在这里，虽然丑陋，仍求star: <a href="https://github.com/simon-xia/tiny_cdecl" target="_blank" rel="noopener">tiny_cdecl</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;扯点蛋先&quot;&gt;扯点蛋先&lt;/h1&gt;
&lt;p&gt;c语言的声明形式和使用形式极其相似，这样的好处是减少编译器的负担，因为使用和声明采用相同的一套优先级和结合性。&lt;/p&gt;
&lt;p&gt;但是这样带来的麻烦就是，当声明的嵌套太多时，从语法上不能直观地读出含义。违反从左至右阅读的自然方式。另一方面，C的操作符优先级体系本身也有15级之多，这也是C久被诟病之处&lt;/p&gt;
&lt;p&gt;《C专家编程》的作者在书中(Ch3.1)毫不避讳地指出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s no exaggeration to say that C is significantly and needlessly complicated because of the awkward manner of combining types&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者还把K&amp;amp;R也抬出来&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C is sometimes castigated for the syntax of its declarations&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此，go语言就坚决摒弃了这种反人类的做法。把变量类型后置，使其无论在多少层嵌套和组合下都显得更加human friendly。曾经UNIX小组成员，今go系干将Rob Pike还专门写了一篇&lt;a href=&quot;http://blog.golang.org/gos-declaration-syntax&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博文&lt;/a&gt;来解释go这样设计的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://simonxia.com/categories/programming/"/>
    
    
      <category term="c" scheme="http://simonxia.com/tags/c/"/>
    
      <category term="decleartion" scheme="http://simonxia.com/tags/decleartion/"/>
    
      <category term="parser" scheme="http://simonxia.com/tags/parser/"/>
    
  </entry>
  
  <entry>
    <title>Hey Sucker</title>
    <link href="http://simonxia.com/Hey-sucker/"/>
    <id>http://simonxia.com/Hey-sucker/</id>
    <published>2014-12-02T06:30:26.000Z</published>
    <updated>2018-07-03T23:51:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>第二次开独立博客。。。上一次也是这个季节，11年，然后逐渐从长草到荒芜，最后终于在我考研的时候寿终正寝。 当年的那个域名<a href="simonxia.com" class="uri">simonxia.com</a>也已易主，追之晚矣 <img src="http://blog-imonxia.qiniudn.com/baozou_ku.png"></p><p>今日开博日，祭上当年的主页，保佑这次走得更远。。。 <img src="http://blog-imonxia.qiniudn.com/E923FB40E3542B7F73D9EDE063979876_B500_900_500_244.PNG"></p><a id="more"></a><p>关站之后，以前的东西移到<a href="http://simonxia.diandian.com/" target="_blank" rel="noopener">点点</a>，但毕竟点点写技术博客不太严肃，就定居<a href="http://blog.csdn.net/simon_xia_uestc" target="_blank" rel="noopener">CSDN</a>，主要就是记了些自己平时学习过程的一些碎碎念。一年有余，小有收获。</p><p>而这次迁出，主要是为了更大的自由度。看到别人的博客都做得优雅漂亮，忍不住要骚动，骚动到了某阈值，忍不住又开始折腾，根本停不下来啊，魂淡</p><p>但博客终究是以内容作为输出的，多整干货才是王道。既是自己的记录，也是与众人分享交流。回顾这几年断断续续的博文，也很欣慰能看到自己一路走来的轨迹，纵是青涩，亦有甘甜。</p><p>** Hey Sucker!**</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二次开独立博客。。。上一次也是这个季节，11年，然后逐渐从长草到荒芜，最后终于在我考研的时候寿终正寝。 当年的那个域名&lt;a href=&quot;simonxia.com&quot; class=&quot;uri&quot;&gt;simonxia.com&lt;/a&gt;也已易主，追之晚矣 &lt;img src=&quot;http://blog-imonxia.qiniudn.com/baozou_ku.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;今日开博日，祭上当年的主页，保佑这次走得更远。。。 &lt;img src=&quot;http://blog-imonxia.qiniudn.com/E923FB40E3542B7F73D9EDE063979876_B500_900_500_244.PNG&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="扯" scheme="http://simonxia.com/categories/%E6%89%AF/"/>
    
    
  </entry>
  
</feed>
